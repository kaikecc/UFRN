// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/01/2021 15:31:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mde
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mde_vlg_sample_tst(
	b_back,
	b_next,
	b_on,
	ck,
	cont_local_10,
	cont_on_5,
	eq_comparador,
	grt_comparador,
	it_comparador,
	nova_msg,
	play,
	sampler_tx
);
input  b_back;
input  b_next;
input  b_on;
input  ck;
input  cont_local_10;
input  cont_on_5;
input  eq_comparador;
input  grt_comparador;
input  it_comparador;
input  nova_msg;
input  play;
output sampler_tx;

reg sample;
time current_time;
always @(b_back or b_next or b_on or ck or cont_local_10 or cont_on_5 or eq_comparador or grt_comparador or it_comparador or nova_msg or play)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mde_vlg_check_tst (
	clr_addr,
	clr_Cont_local,
	clr_CT_INAT,
	clr_CT_Msg,
	clr_CT_ON,
	clr_REGS_REP,
	DISPLAY_EN,
	en,
	en_Cont_local,
	en_CT_INAT,
	en_CT_Msg,
	en_CT_ON,
	erase_MEM,
	F_led,
	Flag_rep_s,
	Flag_rep_sq,
	ld_display_val,
	ld_REGS_GRV,
	ld_REGS_REP_S,
	ld_REGS_REP_SQ,
	M_led,
	O_led,
	P_led,
	R_led,
	r_w,
	s1_comp1,
	s2_comp1,
	s_comp1,
	setUni,
	sl1_comp1,
	sl2_comp1,
	sl_comp1,
	sub_display,
	sum_Display,
	sampler_rx
);
input  clr_addr;
input  clr_Cont_local;
input  clr_CT_INAT;
input  clr_CT_Msg;
input  clr_CT_ON;
input  clr_REGS_REP;
input  DISPLAY_EN;
input  en;
input  en_Cont_local;
input  en_CT_INAT;
input  en_CT_Msg;
input  en_CT_ON;
input  erase_MEM;
input  F_led;
input  Flag_rep_s;
input  Flag_rep_sq;
input  ld_display_val;
input  ld_REGS_GRV;
input  ld_REGS_REP_S;
input  ld_REGS_REP_SQ;
input  M_led;
input  O_led;
input  P_led;
input  R_led;
input  r_w;
input  s1_comp1;
input  s2_comp1;
input  s_comp1;
input  setUni;
input  sl1_comp1;
input  sl2_comp1;
input  sl_comp1;
input  sub_display;
input  sum_Display;
input sampler_rx;

reg  clr_addr_expected;
reg  clr_Cont_local_expected;
reg  clr_CT_INAT_expected;
reg  clr_CT_Msg_expected;
reg  clr_CT_ON_expected;
reg  clr_REGS_REP_expected;
reg  DISPLAY_EN_expected;
reg  en_expected;
reg  en_Cont_local_expected;
reg  en_CT_INAT_expected;
reg  en_CT_Msg_expected;
reg  en_CT_ON_expected;
reg  erase_MEM_expected;
reg  F_led_expected;
reg  Flag_rep_s_expected;
reg  Flag_rep_sq_expected;
reg  ld_display_val_expected;
reg  ld_REGS_GRV_expected;
reg  ld_REGS_REP_S_expected;
reg  ld_REGS_REP_SQ_expected;
reg  M_led_expected;
reg  O_led_expected;
reg  P_led_expected;
reg  R_led_expected;
reg  r_w_expected;
reg  s1_comp1_expected;
reg  s2_comp1_expected;
reg  s_comp1_expected;
reg  setUni_expected;
reg  sl1_comp1_expected;
reg  sl2_comp1_expected;
reg  sl_comp1_expected;
reg  sub_display_expected;
reg  sum_Display_expected;

reg  clr_addr_prev;
reg  clr_Cont_local_prev;
reg  clr_CT_INAT_prev;
reg  clr_CT_Msg_prev;
reg  clr_CT_ON_prev;
reg  clr_REGS_REP_prev;
reg  DISPLAY_EN_prev;
reg  en_prev;
reg  en_Cont_local_prev;
reg  en_CT_INAT_prev;
reg  en_CT_Msg_prev;
reg  en_CT_ON_prev;
reg  erase_MEM_prev;
reg  F_led_prev;
reg  Flag_rep_s_prev;
reg  Flag_rep_sq_prev;
reg  ld_display_val_prev;
reg  ld_REGS_GRV_prev;
reg  ld_REGS_REP_S_prev;
reg  ld_REGS_REP_SQ_prev;
reg  M_led_prev;
reg  O_led_prev;
reg  P_led_prev;
reg  R_led_prev;
reg  r_w_prev;
reg  s1_comp1_prev;
reg  s2_comp1_prev;
reg  s_comp1_prev;
reg  setUni_prev;
reg  sl1_comp1_prev;
reg  sl2_comp1_prev;
reg  sl_comp1_prev;
reg  sub_display_prev;
reg  sum_Display_prev;

reg  clr_addr_expected_prev;
reg  clr_Cont_local_expected_prev;
reg  clr_CT_INAT_expected_prev;
reg  clr_CT_Msg_expected_prev;
reg  clr_CT_ON_expected_prev;
reg  clr_REGS_REP_expected_prev;
reg  DISPLAY_EN_expected_prev;
reg  en_expected_prev;
reg  en_Cont_local_expected_prev;
reg  en_CT_INAT_expected_prev;
reg  en_CT_Msg_expected_prev;
reg  en_CT_ON_expected_prev;
reg  erase_MEM_expected_prev;
reg  F_led_expected_prev;
reg  Flag_rep_s_expected_prev;
reg  Flag_rep_sq_expected_prev;
reg  ld_display_val_expected_prev;
reg  ld_REGS_GRV_expected_prev;
reg  ld_REGS_REP_S_expected_prev;
reg  ld_REGS_REP_SQ_expected_prev;
reg  M_led_expected_prev;
reg  O_led_expected_prev;
reg  P_led_expected_prev;
reg  R_led_expected_prev;
reg  r_w_expected_prev;
reg  s1_comp1_expected_prev;
reg  s2_comp1_expected_prev;
reg  s_comp1_expected_prev;
reg  setUni_expected_prev;
reg  sl1_comp1_expected_prev;
reg  sl2_comp1_expected_prev;
reg  sl_comp1_expected_prev;
reg  sub_display_expected_prev;
reg  sum_Display_expected_prev;

reg  last_clr_addr_exp;
reg  last_clr_Cont_local_exp;
reg  last_clr_CT_INAT_exp;
reg  last_clr_CT_Msg_exp;
reg  last_clr_CT_ON_exp;
reg  last_clr_REGS_REP_exp;
reg  last_DISPLAY_EN_exp;
reg  last_en_exp;
reg  last_en_Cont_local_exp;
reg  last_en_CT_INAT_exp;
reg  last_en_CT_Msg_exp;
reg  last_en_CT_ON_exp;
reg  last_erase_MEM_exp;
reg  last_F_led_exp;
reg  last_Flag_rep_s_exp;
reg  last_Flag_rep_sq_exp;
reg  last_ld_display_val_exp;
reg  last_ld_REGS_GRV_exp;
reg  last_ld_REGS_REP_S_exp;
reg  last_ld_REGS_REP_SQ_exp;
reg  last_M_led_exp;
reg  last_O_led_exp;
reg  last_P_led_exp;
reg  last_R_led_exp;
reg  last_r_w_exp;
reg  last_s1_comp1_exp;
reg  last_s2_comp1_exp;
reg  last_s_comp1_exp;
reg  last_setUni_exp;
reg  last_sl1_comp1_exp;
reg  last_sl2_comp1_exp;
reg  last_sl_comp1_exp;
reg  last_sub_display_exp;
reg  last_sum_Display_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:34] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 34'b1;
end

// update real /o prevs

always @(trigger)
begin
	clr_addr_prev = clr_addr;
	clr_Cont_local_prev = clr_Cont_local;
	clr_CT_INAT_prev = clr_CT_INAT;
	clr_CT_Msg_prev = clr_CT_Msg;
	clr_CT_ON_prev = clr_CT_ON;
	clr_REGS_REP_prev = clr_REGS_REP;
	DISPLAY_EN_prev = DISPLAY_EN;
	en_prev = en;
	en_Cont_local_prev = en_Cont_local;
	en_CT_INAT_prev = en_CT_INAT;
	en_CT_Msg_prev = en_CT_Msg;
	en_CT_ON_prev = en_CT_ON;
	erase_MEM_prev = erase_MEM;
	F_led_prev = F_led;
	Flag_rep_s_prev = Flag_rep_s;
	Flag_rep_sq_prev = Flag_rep_sq;
	ld_display_val_prev = ld_display_val;
	ld_REGS_GRV_prev = ld_REGS_GRV;
	ld_REGS_REP_S_prev = ld_REGS_REP_S;
	ld_REGS_REP_SQ_prev = ld_REGS_REP_SQ;
	M_led_prev = M_led;
	O_led_prev = O_led;
	P_led_prev = P_led;
	R_led_prev = R_led;
	r_w_prev = r_w;
	s1_comp1_prev = s1_comp1;
	s2_comp1_prev = s2_comp1;
	s_comp1_prev = s_comp1;
	setUni_prev = setUni;
	sl1_comp1_prev = sl1_comp1;
	sl2_comp1_prev = sl2_comp1;
	sl_comp1_prev = sl_comp1;
	sub_display_prev = sub_display;
	sum_Display_prev = sum_Display;
end

// update expected /o prevs

always @(trigger)
begin
	clr_addr_expected_prev = clr_addr_expected;
	clr_Cont_local_expected_prev = clr_Cont_local_expected;
	clr_CT_INAT_expected_prev = clr_CT_INAT_expected;
	clr_CT_Msg_expected_prev = clr_CT_Msg_expected;
	clr_CT_ON_expected_prev = clr_CT_ON_expected;
	clr_REGS_REP_expected_prev = clr_REGS_REP_expected;
	DISPLAY_EN_expected_prev = DISPLAY_EN_expected;
	en_expected_prev = en_expected;
	en_Cont_local_expected_prev = en_Cont_local_expected;
	en_CT_INAT_expected_prev = en_CT_INAT_expected;
	en_CT_Msg_expected_prev = en_CT_Msg_expected;
	en_CT_ON_expected_prev = en_CT_ON_expected;
	erase_MEM_expected_prev = erase_MEM_expected;
	F_led_expected_prev = F_led_expected;
	Flag_rep_s_expected_prev = Flag_rep_s_expected;
	Flag_rep_sq_expected_prev = Flag_rep_sq_expected;
	ld_display_val_expected_prev = ld_display_val_expected;
	ld_REGS_GRV_expected_prev = ld_REGS_GRV_expected;
	ld_REGS_REP_S_expected_prev = ld_REGS_REP_S_expected;
	ld_REGS_REP_SQ_expected_prev = ld_REGS_REP_SQ_expected;
	M_led_expected_prev = M_led_expected;
	O_led_expected_prev = O_led_expected;
	P_led_expected_prev = P_led_expected;
	R_led_expected_prev = R_led_expected;
	r_w_expected_prev = r_w_expected;
	s1_comp1_expected_prev = s1_comp1_expected;
	s2_comp1_expected_prev = s2_comp1_expected;
	s_comp1_expected_prev = s_comp1_expected;
	setUni_expected_prev = setUni_expected;
	sl1_comp1_expected_prev = sl1_comp1_expected;
	sl2_comp1_expected_prev = sl2_comp1_expected;
	sl_comp1_expected_prev = sl_comp1_expected;
	sub_display_expected_prev = sub_display_expected;
	sum_Display_expected_prev = sum_Display_expected;
end



// expected clr_addr
initial
begin
	clr_addr_expected = 1'bX;
end 

// expected clr_Cont_local
initial
begin
	clr_Cont_local_expected = 1'bX;
end 

// expected clr_CT_INAT
initial
begin
	clr_CT_INAT_expected = 1'bX;
end 

// expected clr_CT_Msg
initial
begin
	clr_CT_Msg_expected = 1'bX;
end 

// expected clr_CT_ON
initial
begin
	clr_CT_ON_expected = 1'bX;
end 

// expected clr_REGS_REP
initial
begin
	clr_REGS_REP_expected = 1'bX;
end 

// expected DISPLAY_EN
initial
begin
	DISPLAY_EN_expected = 1'bX;
end 

// expected en
initial
begin
	en_expected = 1'bX;
end 

// expected en_Cont_local
initial
begin
	en_Cont_local_expected = 1'bX;
end 

// expected en_CT_INAT
initial
begin
	en_CT_INAT_expected = 1'bX;
end 

// expected en_CT_Msg
initial
begin
	en_CT_Msg_expected = 1'bX;
end 

// expected en_CT_ON
initial
begin
	en_CT_ON_expected = 1'bX;
end 

// expected erase_MEM
initial
begin
	erase_MEM_expected = 1'bX;
end 

// expected F_led
initial
begin
	F_led_expected = 1'bX;
end 

// expected Flag_rep_s
initial
begin
	Flag_rep_s_expected = 1'bX;
end 

// expected Flag_rep_sq
initial
begin
	Flag_rep_sq_expected = 1'bX;
end 

// expected ld_display_val
initial
begin
	ld_display_val_expected = 1'bX;
end 

// expected ld_REGS_GRV
initial
begin
	ld_REGS_GRV_expected = 1'bX;
end 

// expected ld_REGS_REP_S
initial
begin
	ld_REGS_REP_S_expected = 1'bX;
end 

// expected ld_REGS_REP_SQ
initial
begin
	ld_REGS_REP_SQ_expected = 1'bX;
end 

// expected M_led
initial
begin
	M_led_expected = 1'bX;
end 

// expected O_led
initial
begin
	O_led_expected = 1'bX;
end 

// expected P_led
initial
begin
	P_led_expected = 1'bX;
end 

// expected R_led
initial
begin
	R_led_expected = 1'bX;
end 

// expected r_w
initial
begin
	r_w_expected = 1'bX;
end 

// expected s1_comp1
initial
begin
	s1_comp1_expected = 1'bX;
end 

// expected s2_comp1
initial
begin
	s2_comp1_expected = 1'bX;
end 

// expected s_comp1
initial
begin
	s_comp1_expected = 1'bX;
end 

// expected setUni
initial
begin
	setUni_expected = 1'bX;
end 

// expected sl1_comp1
initial
begin
	sl1_comp1_expected = 1'bX;
end 

// expected sl2_comp1
initial
begin
	sl2_comp1_expected = 1'bX;
end 

// expected sl_comp1
initial
begin
	sl_comp1_expected = 1'bX;
end 

// expected sub_display
initial
begin
	sub_display_expected = 1'bX;
end 

// expected sum_Display
initial
begin
	sum_Display_expected = 1'bX;
end 
// generate trigger
always @(clr_addr_expected or clr_addr or clr_Cont_local_expected or clr_Cont_local or clr_CT_INAT_expected or clr_CT_INAT or clr_CT_Msg_expected or clr_CT_Msg or clr_CT_ON_expected or clr_CT_ON or clr_REGS_REP_expected or clr_REGS_REP or DISPLAY_EN_expected or DISPLAY_EN or en_expected or en or en_Cont_local_expected or en_Cont_local or en_CT_INAT_expected or en_CT_INAT or en_CT_Msg_expected or en_CT_Msg or en_CT_ON_expected or en_CT_ON or erase_MEM_expected or erase_MEM or F_led_expected or F_led or Flag_rep_s_expected or Flag_rep_s or Flag_rep_sq_expected or Flag_rep_sq or ld_display_val_expected or ld_display_val or ld_REGS_GRV_expected or ld_REGS_GRV or ld_REGS_REP_S_expected or ld_REGS_REP_S or ld_REGS_REP_SQ_expected or ld_REGS_REP_SQ or M_led_expected or M_led or O_led_expected or O_led or P_led_expected or P_led or R_led_expected or R_led or r_w_expected or r_w or s1_comp1_expected or s1_comp1 or s2_comp1_expected or s2_comp1 or s_comp1_expected or s_comp1 or setUni_expected or setUni or sl1_comp1_expected or sl1_comp1 or sl2_comp1_expected or sl2_comp1 or sl_comp1_expected or sl_comp1 or sub_display_expected or sub_display or sum_Display_expected or sum_Display)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clr_addr = %b | expected clr_Cont_local = %b | expected clr_CT_INAT = %b | expected clr_CT_Msg = %b | expected clr_CT_ON = %b | expected clr_REGS_REP = %b | expected DISPLAY_EN = %b | expected en = %b | expected en_Cont_local = %b | expected en_CT_INAT = %b | expected en_CT_Msg = %b | expected en_CT_ON = %b | expected erase_MEM = %b | expected F_led = %b | expected Flag_rep_s = %b | expected Flag_rep_sq = %b | expected ld_display_val = %b | expected ld_REGS_GRV = %b | expected ld_REGS_REP_S = %b | expected ld_REGS_REP_SQ = %b | expected M_led = %b | expected O_led = %b | expected P_led = %b | expected R_led = %b | expected r_w = %b | expected s1_comp1 = %b | expected s2_comp1 = %b | expected s_comp1 = %b | expected setUni = %b | expected sl1_comp1 = %b | expected sl2_comp1 = %b | expected sl_comp1 = %b | expected sub_display = %b | expected sum_Display = %b | ",clr_addr_expected_prev,clr_Cont_local_expected_prev,clr_CT_INAT_expected_prev,clr_CT_Msg_expected_prev,clr_CT_ON_expected_prev,clr_REGS_REP_expected_prev,DISPLAY_EN_expected_prev,en_expected_prev,en_Cont_local_expected_prev,en_CT_INAT_expected_prev,en_CT_Msg_expected_prev,en_CT_ON_expected_prev,erase_MEM_expected_prev,F_led_expected_prev,Flag_rep_s_expected_prev,Flag_rep_sq_expected_prev,ld_display_val_expected_prev,ld_REGS_GRV_expected_prev,ld_REGS_REP_S_expected_prev,ld_REGS_REP_SQ_expected_prev,M_led_expected_prev,O_led_expected_prev,P_led_expected_prev,R_led_expected_prev,r_w_expected_prev,s1_comp1_expected_prev,s2_comp1_expected_prev,s_comp1_expected_prev,setUni_expected_prev,sl1_comp1_expected_prev,sl2_comp1_expected_prev,sl_comp1_expected_prev,sub_display_expected_prev,sum_Display_expected_prev);
	$display("| real clr_addr = %b | real clr_Cont_local = %b | real clr_CT_INAT = %b | real clr_CT_Msg = %b | real clr_CT_ON = %b | real clr_REGS_REP = %b | real DISPLAY_EN = %b | real en = %b | real en_Cont_local = %b | real en_CT_INAT = %b | real en_CT_Msg = %b | real en_CT_ON = %b | real erase_MEM = %b | real F_led = %b | real Flag_rep_s = %b | real Flag_rep_sq = %b | real ld_display_val = %b | real ld_REGS_GRV = %b | real ld_REGS_REP_S = %b | real ld_REGS_REP_SQ = %b | real M_led = %b | real O_led = %b | real P_led = %b | real R_led = %b | real r_w = %b | real s1_comp1 = %b | real s2_comp1 = %b | real s_comp1 = %b | real setUni = %b | real sl1_comp1 = %b | real sl2_comp1 = %b | real sl_comp1 = %b | real sub_display = %b | real sum_Display = %b | ",clr_addr_prev,clr_Cont_local_prev,clr_CT_INAT_prev,clr_CT_Msg_prev,clr_CT_ON_prev,clr_REGS_REP_prev,DISPLAY_EN_prev,en_prev,en_Cont_local_prev,en_CT_INAT_prev,en_CT_Msg_prev,en_CT_ON_prev,erase_MEM_prev,F_led_prev,Flag_rep_s_prev,Flag_rep_sq_prev,ld_display_val_prev,ld_REGS_GRV_prev,ld_REGS_REP_S_prev,ld_REGS_REP_SQ_prev,M_led_prev,O_led_prev,P_led_prev,R_led_prev,r_w_prev,s1_comp1_prev,s2_comp1_prev,s_comp1_prev,setUni_prev,sl1_comp1_prev,sl2_comp1_prev,sl_comp1_prev,sub_display_prev,sum_Display_prev);
`endif
	if (
		( clr_addr_expected_prev !== 1'bx ) && ( clr_addr_prev !== clr_addr_expected_prev )
		&& ((clr_addr_expected_prev !== last_clr_addr_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clr_addr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clr_addr_expected_prev);
		$display ("     Real value = %b", clr_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clr_addr_exp = clr_addr_expected_prev;
	end
	if (
		( clr_Cont_local_expected_prev !== 1'bx ) && ( clr_Cont_local_prev !== clr_Cont_local_expected_prev )
		&& ((clr_Cont_local_expected_prev !== last_clr_Cont_local_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clr_Cont_local :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clr_Cont_local_expected_prev);
		$display ("     Real value = %b", clr_Cont_local_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clr_Cont_local_exp = clr_Cont_local_expected_prev;
	end
	if (
		( clr_CT_INAT_expected_prev !== 1'bx ) && ( clr_CT_INAT_prev !== clr_CT_INAT_expected_prev )
		&& ((clr_CT_INAT_expected_prev !== last_clr_CT_INAT_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clr_CT_INAT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clr_CT_INAT_expected_prev);
		$display ("     Real value = %b", clr_CT_INAT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clr_CT_INAT_exp = clr_CT_INAT_expected_prev;
	end
	if (
		( clr_CT_Msg_expected_prev !== 1'bx ) && ( clr_CT_Msg_prev !== clr_CT_Msg_expected_prev )
		&& ((clr_CT_Msg_expected_prev !== last_clr_CT_Msg_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clr_CT_Msg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clr_CT_Msg_expected_prev);
		$display ("     Real value = %b", clr_CT_Msg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_clr_CT_Msg_exp = clr_CT_Msg_expected_prev;
	end
	if (
		( clr_CT_ON_expected_prev !== 1'bx ) && ( clr_CT_ON_prev !== clr_CT_ON_expected_prev )
		&& ((clr_CT_ON_expected_prev !== last_clr_CT_ON_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clr_CT_ON :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clr_CT_ON_expected_prev);
		$display ("     Real value = %b", clr_CT_ON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_clr_CT_ON_exp = clr_CT_ON_expected_prev;
	end
	if (
		( clr_REGS_REP_expected_prev !== 1'bx ) && ( clr_REGS_REP_prev !== clr_REGS_REP_expected_prev )
		&& ((clr_REGS_REP_expected_prev !== last_clr_REGS_REP_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clr_REGS_REP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clr_REGS_REP_expected_prev);
		$display ("     Real value = %b", clr_REGS_REP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_clr_REGS_REP_exp = clr_REGS_REP_expected_prev;
	end
	if (
		( DISPLAY_EN_expected_prev !== 1'bx ) && ( DISPLAY_EN_prev !== DISPLAY_EN_expected_prev )
		&& ((DISPLAY_EN_expected_prev !== last_DISPLAY_EN_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DISPLAY_EN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DISPLAY_EN_expected_prev);
		$display ("     Real value = %b", DISPLAY_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DISPLAY_EN_exp = DISPLAY_EN_expected_prev;
	end
	if (
		( en_expected_prev !== 1'bx ) && ( en_prev !== en_expected_prev )
		&& ((en_expected_prev !== last_en_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_expected_prev);
		$display ("     Real value = %b", en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_en_exp = en_expected_prev;
	end
	if (
		( en_Cont_local_expected_prev !== 1'bx ) && ( en_Cont_local_prev !== en_Cont_local_expected_prev )
		&& ((en_Cont_local_expected_prev !== last_en_Cont_local_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en_Cont_local :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_Cont_local_expected_prev);
		$display ("     Real value = %b", en_Cont_local_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_en_Cont_local_exp = en_Cont_local_expected_prev;
	end
	if (
		( en_CT_INAT_expected_prev !== 1'bx ) && ( en_CT_INAT_prev !== en_CT_INAT_expected_prev )
		&& ((en_CT_INAT_expected_prev !== last_en_CT_INAT_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en_CT_INAT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_CT_INAT_expected_prev);
		$display ("     Real value = %b", en_CT_INAT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_en_CT_INAT_exp = en_CT_INAT_expected_prev;
	end
	if (
		( en_CT_Msg_expected_prev !== 1'bx ) && ( en_CT_Msg_prev !== en_CT_Msg_expected_prev )
		&& ((en_CT_Msg_expected_prev !== last_en_CT_Msg_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en_CT_Msg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_CT_Msg_expected_prev);
		$display ("     Real value = %b", en_CT_Msg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_en_CT_Msg_exp = en_CT_Msg_expected_prev;
	end
	if (
		( en_CT_ON_expected_prev !== 1'bx ) && ( en_CT_ON_prev !== en_CT_ON_expected_prev )
		&& ((en_CT_ON_expected_prev !== last_en_CT_ON_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port en_CT_ON :: @time = %t",  $realtime);
		$display ("     Expected value = %b", en_CT_ON_expected_prev);
		$display ("     Real value = %b", en_CT_ON_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_en_CT_ON_exp = en_CT_ON_expected_prev;
	end
	if (
		( erase_MEM_expected_prev !== 1'bx ) && ( erase_MEM_prev !== erase_MEM_expected_prev )
		&& ((erase_MEM_expected_prev !== last_erase_MEM_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port erase_MEM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", erase_MEM_expected_prev);
		$display ("     Real value = %b", erase_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_erase_MEM_exp = erase_MEM_expected_prev;
	end
	if (
		( F_led_expected_prev !== 1'bx ) && ( F_led_prev !== F_led_expected_prev )
		&& ((F_led_expected_prev !== last_F_led_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_led_expected_prev);
		$display ("     Real value = %b", F_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_F_led_exp = F_led_expected_prev;
	end
	if (
		( Flag_rep_s_expected_prev !== 1'bx ) && ( Flag_rep_s_prev !== Flag_rep_s_expected_prev )
		&& ((Flag_rep_s_expected_prev !== last_Flag_rep_s_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flag_rep_s :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flag_rep_s_expected_prev);
		$display ("     Real value = %b", Flag_rep_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Flag_rep_s_exp = Flag_rep_s_expected_prev;
	end
	if (
		( Flag_rep_sq_expected_prev !== 1'bx ) && ( Flag_rep_sq_prev !== Flag_rep_sq_expected_prev )
		&& ((Flag_rep_sq_expected_prev !== last_Flag_rep_sq_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flag_rep_sq :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flag_rep_sq_expected_prev);
		$display ("     Real value = %b", Flag_rep_sq_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Flag_rep_sq_exp = Flag_rep_sq_expected_prev;
	end
	if (
		( ld_display_val_expected_prev !== 1'bx ) && ( ld_display_val_prev !== ld_display_val_expected_prev )
		&& ((ld_display_val_expected_prev !== last_ld_display_val_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_display_val :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_display_val_expected_prev);
		$display ("     Real value = %b", ld_display_val_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ld_display_val_exp = ld_display_val_expected_prev;
	end
	if (
		( ld_REGS_GRV_expected_prev !== 1'bx ) && ( ld_REGS_GRV_prev !== ld_REGS_GRV_expected_prev )
		&& ((ld_REGS_GRV_expected_prev !== last_ld_REGS_GRV_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_REGS_GRV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_REGS_GRV_expected_prev);
		$display ("     Real value = %b", ld_REGS_GRV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ld_REGS_GRV_exp = ld_REGS_GRV_expected_prev;
	end
	if (
		( ld_REGS_REP_S_expected_prev !== 1'bx ) && ( ld_REGS_REP_S_prev !== ld_REGS_REP_S_expected_prev )
		&& ((ld_REGS_REP_S_expected_prev !== last_ld_REGS_REP_S_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_REGS_REP_S :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_REGS_REP_S_expected_prev);
		$display ("     Real value = %b", ld_REGS_REP_S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ld_REGS_REP_S_exp = ld_REGS_REP_S_expected_prev;
	end
	if (
		( ld_REGS_REP_SQ_expected_prev !== 1'bx ) && ( ld_REGS_REP_SQ_prev !== ld_REGS_REP_SQ_expected_prev )
		&& ((ld_REGS_REP_SQ_expected_prev !== last_ld_REGS_REP_SQ_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ld_REGS_REP_SQ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ld_REGS_REP_SQ_expected_prev);
		$display ("     Real value = %b", ld_REGS_REP_SQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_ld_REGS_REP_SQ_exp = ld_REGS_REP_SQ_expected_prev;
	end
	if (
		( M_led_expected_prev !== 1'bx ) && ( M_led_prev !== M_led_expected_prev )
		&& ((M_led_expected_prev !== last_M_led_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_led_expected_prev);
		$display ("     Real value = %b", M_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_M_led_exp = M_led_expected_prev;
	end
	if (
		( O_led_expected_prev !== 1'bx ) && ( O_led_prev !== O_led_expected_prev )
		&& ((O_led_expected_prev !== last_O_led_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O_led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_led_expected_prev);
		$display ("     Real value = %b", O_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_O_led_exp = O_led_expected_prev;
	end
	if (
		( P_led_expected_prev !== 1'bx ) && ( P_led_prev !== P_led_expected_prev )
		&& ((P_led_expected_prev !== last_P_led_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_led_expected_prev);
		$display ("     Real value = %b", P_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_P_led_exp = P_led_expected_prev;
	end
	if (
		( R_led_expected_prev !== 1'bx ) && ( R_led_prev !== R_led_expected_prev )
		&& ((R_led_expected_prev !== last_R_led_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_led_expected_prev);
		$display ("     Real value = %b", R_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_R_led_exp = R_led_expected_prev;
	end
	if (
		( r_w_expected_prev !== 1'bx ) && ( r_w_prev !== r_w_expected_prev )
		&& ((r_w_expected_prev !== last_r_w_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r_w :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_w_expected_prev);
		$display ("     Real value = %b", r_w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_r_w_exp = r_w_expected_prev;
	end
	if (
		( s1_comp1_expected_prev !== 1'bx ) && ( s1_comp1_prev !== s1_comp1_expected_prev )
		&& ((s1_comp1_expected_prev !== last_s1_comp1_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1_comp1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_comp1_expected_prev);
		$display ("     Real value = %b", s1_comp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_s1_comp1_exp = s1_comp1_expected_prev;
	end
	if (
		( s2_comp1_expected_prev !== 1'bx ) && ( s2_comp1_prev !== s2_comp1_expected_prev )
		&& ((s2_comp1_expected_prev !== last_s2_comp1_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2_comp1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_comp1_expected_prev);
		$display ("     Real value = %b", s2_comp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_s2_comp1_exp = s2_comp1_expected_prev;
	end
	if (
		( s_comp1_expected_prev !== 1'bx ) && ( s_comp1_prev !== s_comp1_expected_prev )
		&& ((s_comp1_expected_prev !== last_s_comp1_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_comp1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_comp1_expected_prev);
		$display ("     Real value = %b", s_comp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_s_comp1_exp = s_comp1_expected_prev;
	end
	if (
		( setUni_expected_prev !== 1'bx ) && ( setUni_prev !== setUni_expected_prev )
		&& ((setUni_expected_prev !== last_setUni_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port setUni :: @time = %t",  $realtime);
		$display ("     Expected value = %b", setUni_expected_prev);
		$display ("     Real value = %b", setUni_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_setUni_exp = setUni_expected_prev;
	end
	if (
		( sl1_comp1_expected_prev !== 1'bx ) && ( sl1_comp1_prev !== sl1_comp1_expected_prev )
		&& ((sl1_comp1_expected_prev !== last_sl1_comp1_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sl1_comp1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sl1_comp1_expected_prev);
		$display ("     Real value = %b", sl1_comp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_sl1_comp1_exp = sl1_comp1_expected_prev;
	end
	if (
		( sl2_comp1_expected_prev !== 1'bx ) && ( sl2_comp1_prev !== sl2_comp1_expected_prev )
		&& ((sl2_comp1_expected_prev !== last_sl2_comp1_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sl2_comp1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sl2_comp1_expected_prev);
		$display ("     Real value = %b", sl2_comp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_sl2_comp1_exp = sl2_comp1_expected_prev;
	end
	if (
		( sl_comp1_expected_prev !== 1'bx ) && ( sl_comp1_prev !== sl_comp1_expected_prev )
		&& ((sl_comp1_expected_prev !== last_sl_comp1_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sl_comp1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sl_comp1_expected_prev);
		$display ("     Real value = %b", sl_comp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_sl_comp1_exp = sl_comp1_expected_prev;
	end
	if (
		( sub_display_expected_prev !== 1'bx ) && ( sub_display_prev !== sub_display_expected_prev )
		&& ((sub_display_expected_prev !== last_sub_display_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sub_display :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sub_display_expected_prev);
		$display ("     Real value = %b", sub_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_sub_display_exp = sub_display_expected_prev;
	end
	if (
		( sum_Display_expected_prev !== 1'bx ) && ( sum_Display_prev !== sum_Display_expected_prev )
		&& ((sum_Display_expected_prev !== last_sum_Display_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum_Display :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_Display_expected_prev);
		$display ("     Real value = %b", sum_Display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_sum_Display_exp = sum_Display_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module mde_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b_back;
reg b_next;
reg b_on;
reg ck;
reg cont_local_10;
reg cont_on_5;
reg eq_comparador;
reg grt_comparador;
reg it_comparador;
reg nova_msg;
reg play;
// wires                                               
wire clr_addr;
wire clr_Cont_local;
wire clr_CT_INAT;
wire clr_CT_Msg;
wire clr_CT_ON;
wire clr_REGS_REP;
wire DISPLAY_EN;
wire en;
wire en_Cont_local;
wire en_CT_INAT;
wire en_CT_Msg;
wire en_CT_ON;
wire erase_MEM;
wire F_led;
wire Flag_rep_s;
wire Flag_rep_sq;
wire ld_display_val;
wire ld_REGS_GRV;
wire ld_REGS_REP_S;
wire ld_REGS_REP_SQ;
wire M_led;
wire O_led;
wire P_led;
wire R_led;
wire r_w;
wire s1_comp1;
wire s2_comp1;
wire s_comp1;
wire setUni;
wire sl1_comp1;
wire sl2_comp1;
wire sl_comp1;
wire sub_display;
wire sum_Display;

wire sampler;                             

// assign statements (if any)                          
mde i1 (
// port map - connection between master ports and signals/registers   
	.b_back(b_back),
	.b_next(b_next),
	.b_on(b_on),
	.ck(ck),
	.clr_addr(clr_addr),
	.clr_Cont_local(clr_Cont_local),
	.clr_CT_INAT(clr_CT_INAT),
	.clr_CT_Msg(clr_CT_Msg),
	.clr_CT_ON(clr_CT_ON),
	.clr_REGS_REP(clr_REGS_REP),
	.cont_local_10(cont_local_10),
	.cont_on_5(cont_on_5),
	.DISPLAY_EN(DISPLAY_EN),
	.en(en),
	.en_Cont_local(en_Cont_local),
	.en_CT_INAT(en_CT_INAT),
	.en_CT_Msg(en_CT_Msg),
	.en_CT_ON(en_CT_ON),
	.eq_comparador(eq_comparador),
	.erase_MEM(erase_MEM),
	.F_led(F_led),
	.Flag_rep_s(Flag_rep_s),
	.Flag_rep_sq(Flag_rep_sq),
	.grt_comparador(grt_comparador),
	.it_comparador(it_comparador),
	.ld_display_val(ld_display_val),
	.ld_REGS_GRV(ld_REGS_GRV),
	.ld_REGS_REP_S(ld_REGS_REP_S),
	.ld_REGS_REP_SQ(ld_REGS_REP_SQ),
	.M_led(M_led),
	.nova_msg(nova_msg),
	.O_led(O_led),
	.P_led(P_led),
	.play(play),
	.R_led(R_led),
	.r_w(r_w),
	.s1_comp1(s1_comp1),
	.s2_comp1(s2_comp1),
	.s_comp1(s_comp1),
	.setUni(setUni),
	.sl1_comp1(sl1_comp1),
	.sl2_comp1(sl2_comp1),
	.sl_comp1(sl_comp1),
	.sub_display(sub_display),
	.sum_Display(sum_Display)
);

// ck
always
begin
	ck = 1'b0;
	ck = #5000 1'b1;
	#5000;
end 

// b_back
initial
begin
	b_back = 1'b0;
end 

// b_next
initial
begin
	b_next = 1'b0;
end 

// cont_local_10
initial
begin
	cont_local_10 = 1'b0;
end 

// cont_on_5
initial
begin
	cont_on_5 = 1'b0;
end 

// b_on
initial
begin
	b_on = 1'b0;
	b_on = #80000 1'b1;
	b_on = #20000 1'b0;
end 

// eq_comparador
initial
begin
	eq_comparador = 1'b0;
end 

// nova_msg
initial
begin
	nova_msg = 1'b0;
end 

// play
initial
begin
	play = 1'b0;
end 

// grt_comparador
initial
begin
	grt_comparador = 1'b0;
end 

// it_comparador
initial
begin
	it_comparador = 1'b0;
end 

mde_vlg_sample_tst tb_sample (
	.b_back(b_back),
	.b_next(b_next),
	.b_on(b_on),
	.ck(ck),
	.cont_local_10(cont_local_10),
	.cont_on_5(cont_on_5),
	.eq_comparador(eq_comparador),
	.grt_comparador(grt_comparador),
	.it_comparador(it_comparador),
	.nova_msg(nova_msg),
	.play(play),
	.sampler_tx(sampler)
);

mde_vlg_check_tst tb_out(
	.clr_addr(clr_addr),
	.clr_Cont_local(clr_Cont_local),
	.clr_CT_INAT(clr_CT_INAT),
	.clr_CT_Msg(clr_CT_Msg),
	.clr_CT_ON(clr_CT_ON),
	.clr_REGS_REP(clr_REGS_REP),
	.DISPLAY_EN(DISPLAY_EN),
	.en(en),
	.en_Cont_local(en_Cont_local),
	.en_CT_INAT(en_CT_INAT),
	.en_CT_Msg(en_CT_Msg),
	.en_CT_ON(en_CT_ON),
	.erase_MEM(erase_MEM),
	.F_led(F_led),
	.Flag_rep_s(Flag_rep_s),
	.Flag_rep_sq(Flag_rep_sq),
	.ld_display_val(ld_display_val),
	.ld_REGS_GRV(ld_REGS_GRV),
	.ld_REGS_REP_S(ld_REGS_REP_S),
	.ld_REGS_REP_SQ(ld_REGS_REP_SQ),
	.M_led(M_led),
	.O_led(O_led),
	.P_led(P_led),
	.R_led(R_led),
	.r_w(r_w),
	.s1_comp1(s1_comp1),
	.s2_comp1(s2_comp1),
	.s_comp1(s_comp1),
	.setUni(setUni),
	.sl1_comp1(sl1_comp1),
	.sl2_comp1(sl2_comp1),
	.sl_comp1(sl_comp1),
	.sub_display(sub_display),
	.sum_Display(sum_Display),
	.sampler_rx(sampler)
);
endmodule

