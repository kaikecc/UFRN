// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/31/2021 12:56:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MUX1_comp1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MUX1_comp1_vlg_sample_tst(
	MUX1_CONT_LOCAL,
	MUX1_CT_Msg,
	MUX1_CT_ON,
	MUX1_DISPLAY_VAL,
	MUX1_REGS_GRV,
	MUX1_REGS_REP_S,
	MUX1_REGS_REP_SQ,
	MUX1_s1_comp1,
	MUX1_s2_comp1,
	MUX1_s_comp1,
	sampler_tx
);
input [7:0] MUX1_CONT_LOCAL;
input [7:0] MUX1_CT_Msg;
input [7:0] MUX1_CT_ON;
input [7:0] MUX1_DISPLAY_VAL;
input [7:0] MUX1_REGS_GRV;
input [7:0] MUX1_REGS_REP_S;
input [7:0] MUX1_REGS_REP_SQ;
input  MUX1_s1_comp1;
input  MUX1_s2_comp1;
input  MUX1_s_comp1;
output sampler_tx;

reg sample;
time current_time;
always @(MUX1_CONT_LOCAL or MUX1_CT_Msg or MUX1_CT_ON or MUX1_DISPLAY_VAL or MUX1_REGS_GRV or MUX1_REGS_REP_S or MUX1_REGS_REP_SQ or MUX1_s1_comp1 or MUX1_s2_comp1 or MUX1_s_comp1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MUX1_comp1_vlg_check_tst (
	MC,
	sampler_rx
);
input [7:0] MC;
input sampler_rx;

reg [7:0] MC_expected;

reg [7:0] MC_prev;

reg [7:0] MC_expected_prev;

reg [7:0] last_MC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	MC_prev = MC;
end

// update expected /o prevs

always @(trigger)
begin
	MC_expected_prev = MC_expected;
end


// expected MC[ 7 ]
initial
begin
	MC_expected[7] = 1'bX;
end 
// expected MC[ 6 ]
initial
begin
	MC_expected[6] = 1'bX;
end 
// expected MC[ 5 ]
initial
begin
	MC_expected[5] = 1'bX;
end 
// expected MC[ 4 ]
initial
begin
	MC_expected[4] = 1'bX;
end 
// expected MC[ 3 ]
initial
begin
	MC_expected[3] = 1'bX;
end 
// expected MC[ 2 ]
initial
begin
	MC_expected[2] = 1'bX;
end 
// expected MC[ 1 ]
initial
begin
	MC_expected[1] = 1'bX;
end 
// expected MC[ 0 ]
initial
begin
	MC_expected[0] = 1'bX;
end 
// generate trigger
always @(MC_expected or MC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MC = %b | ",MC_expected_prev);
	$display("| real MC = %b | ",MC_prev);
`endif
	if (
		( MC_expected_prev[0] !== 1'bx ) && ( MC_prev[0] !== MC_expected_prev[0] )
		&& ((MC_expected_prev[0] !== last_MC_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MC_exp[0] = MC_expected_prev[0];
	end
	if (
		( MC_expected_prev[1] !== 1'bx ) && ( MC_prev[1] !== MC_expected_prev[1] )
		&& ((MC_expected_prev[1] !== last_MC_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MC_exp[1] = MC_expected_prev[1];
	end
	if (
		( MC_expected_prev[2] !== 1'bx ) && ( MC_prev[2] !== MC_expected_prev[2] )
		&& ((MC_expected_prev[2] !== last_MC_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MC_exp[2] = MC_expected_prev[2];
	end
	if (
		( MC_expected_prev[3] !== 1'bx ) && ( MC_prev[3] !== MC_expected_prev[3] )
		&& ((MC_expected_prev[3] !== last_MC_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MC_exp[3] = MC_expected_prev[3];
	end
	if (
		( MC_expected_prev[4] !== 1'bx ) && ( MC_prev[4] !== MC_expected_prev[4] )
		&& ((MC_expected_prev[4] !== last_MC_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MC_exp[4] = MC_expected_prev[4];
	end
	if (
		( MC_expected_prev[5] !== 1'bx ) && ( MC_prev[5] !== MC_expected_prev[5] )
		&& ((MC_expected_prev[5] !== last_MC_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MC_exp[5] = MC_expected_prev[5];
	end
	if (
		( MC_expected_prev[6] !== 1'bx ) && ( MC_prev[6] !== MC_expected_prev[6] )
		&& ((MC_expected_prev[6] !== last_MC_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MC_exp[6] = MC_expected_prev[6];
	end
	if (
		( MC_expected_prev[7] !== 1'bx ) && ( MC_prev[7] !== MC_expected_prev[7] )
		&& ((MC_expected_prev[7] !== last_MC_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MC_exp[7] = MC_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MUX1_comp1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] MUX1_CONT_LOCAL;
reg [7:0] MUX1_CT_Msg;
reg [7:0] MUX1_CT_ON;
reg [7:0] MUX1_DISPLAY_VAL;
reg [7:0] MUX1_REGS_GRV;
reg [7:0] MUX1_REGS_REP_S;
reg [7:0] MUX1_REGS_REP_SQ;
reg MUX1_s1_comp1;
reg MUX1_s2_comp1;
reg MUX1_s_comp1;
// wires                                               
wire [7:0] MC;

wire sampler;                             

// assign statements (if any)                          
MUX1_comp1 i1 (
// port map - connection between master ports and signals/registers   
	.MC(MC),
	.MUX1_CONT_LOCAL(MUX1_CONT_LOCAL),
	.MUX1_CT_Msg(MUX1_CT_Msg),
	.MUX1_CT_ON(MUX1_CT_ON),
	.MUX1_DISPLAY_VAL(MUX1_DISPLAY_VAL),
	.MUX1_REGS_GRV(MUX1_REGS_GRV),
	.MUX1_REGS_REP_S(MUX1_REGS_REP_S),
	.MUX1_REGS_REP_SQ(MUX1_REGS_REP_SQ),
	.MUX1_s1_comp1(MUX1_s1_comp1),
	.MUX1_s2_comp1(MUX1_s2_comp1),
	.MUX1_s_comp1(MUX1_s_comp1)
);
// MUX1_CONT_LOCAL[ 7 ]
initial
begin
	MUX1_CONT_LOCAL[7] = 1'b0;
end 
// MUX1_CONT_LOCAL[ 6 ]
initial
begin
	MUX1_CONT_LOCAL[6] = 1'b0;
end 
// MUX1_CONT_LOCAL[ 5 ]
initial
begin
	MUX1_CONT_LOCAL[5] = 1'b0;
end 
// MUX1_CONT_LOCAL[ 4 ]
initial
begin
	MUX1_CONT_LOCAL[4] = 1'b0;
end 
// MUX1_CONT_LOCAL[ 3 ]
initial
begin
	MUX1_CONT_LOCAL[3] = 1'b0;
end 
// MUX1_CONT_LOCAL[ 2 ]
initial
begin
	MUX1_CONT_LOCAL[2] = 1'b0;
end 
// MUX1_CONT_LOCAL[ 1 ]
initial
begin
	MUX1_CONT_LOCAL[1] = 1'b1;
end 
// MUX1_CONT_LOCAL[ 0 ]
initial
begin
	MUX1_CONT_LOCAL[0] = 1'b1;
end 
// MUX1_CT_Msg[ 7 ]
initial
begin
	MUX1_CT_Msg[7] = 1'b0;
end 
// MUX1_CT_Msg[ 6 ]
initial
begin
	MUX1_CT_Msg[6] = 1'b0;
end 
// MUX1_CT_Msg[ 5 ]
initial
begin
	MUX1_CT_Msg[5] = 1'b0;
end 
// MUX1_CT_Msg[ 4 ]
initial
begin
	MUX1_CT_Msg[4] = 1'b0;
end 
// MUX1_CT_Msg[ 3 ]
initial
begin
	MUX1_CT_Msg[3] = 1'b0;
end 
// MUX1_CT_Msg[ 2 ]
initial
begin
	MUX1_CT_Msg[2] = 1'b1;
end 
// MUX1_CT_Msg[ 1 ]
initial
begin
	MUX1_CT_Msg[1] = 1'b0;
end 
// MUX1_CT_Msg[ 0 ]
initial
begin
	MUX1_CT_Msg[0] = 1'b1;
end 
// MUX1_CT_ON[ 7 ]
initial
begin
	MUX1_CT_ON[7] = 1'b0;
end 
// MUX1_CT_ON[ 6 ]
initial
begin
	MUX1_CT_ON[6] = 1'b0;
end 
// MUX1_CT_ON[ 5 ]
initial
begin
	MUX1_CT_ON[5] = 1'b0;
end 
// MUX1_CT_ON[ 4 ]
initial
begin
	MUX1_CT_ON[4] = 1'b0;
end 
// MUX1_CT_ON[ 3 ]
initial
begin
	MUX1_CT_ON[3] = 1'b0;
end 
// MUX1_CT_ON[ 2 ]
initial
begin
	MUX1_CT_ON[2] = 1'b1;
end 
// MUX1_CT_ON[ 1 ]
initial
begin
	MUX1_CT_ON[1] = 1'b1;
end 
// MUX1_CT_ON[ 0 ]
initial
begin
	MUX1_CT_ON[0] = 1'b1;
end 
// MUX1_DISPLAY_VAL[ 7 ]
initial
begin
	MUX1_DISPLAY_VAL[7] = 1'b0;
end 
// MUX1_DISPLAY_VAL[ 6 ]
initial
begin
	MUX1_DISPLAY_VAL[6] = 1'b0;
end 
// MUX1_DISPLAY_VAL[ 5 ]
initial
begin
	MUX1_DISPLAY_VAL[5] = 1'b0;
end 
// MUX1_DISPLAY_VAL[ 4 ]
initial
begin
	MUX1_DISPLAY_VAL[4] = 1'b0;
end 
// MUX1_DISPLAY_VAL[ 3 ]
initial
begin
	MUX1_DISPLAY_VAL[3] = 1'b1;
end 
// MUX1_DISPLAY_VAL[ 2 ]
initial
begin
	MUX1_DISPLAY_VAL[2] = 1'b0;
end 
// MUX1_DISPLAY_VAL[ 1 ]
initial
begin
	MUX1_DISPLAY_VAL[1] = 1'b1;
end 
// MUX1_DISPLAY_VAL[ 0 ]
initial
begin
	MUX1_DISPLAY_VAL[0] = 1'b1;
end 
// MUX1_REGS_GRV[ 7 ]
initial
begin
	MUX1_REGS_GRV[7] = 1'b0;
end 
// MUX1_REGS_GRV[ 6 ]
initial
begin
	MUX1_REGS_GRV[6] = 1'b0;
end 
// MUX1_REGS_GRV[ 5 ]
initial
begin
	MUX1_REGS_GRV[5] = 1'b0;
end 
// MUX1_REGS_GRV[ 4 ]
initial
begin
	MUX1_REGS_GRV[4] = 1'b0;
end 
// MUX1_REGS_GRV[ 3 ]
initial
begin
	MUX1_REGS_GRV[3] = 1'b1;
end 
// MUX1_REGS_GRV[ 2 ]
initial
begin
	MUX1_REGS_GRV[2] = 1'b1;
end 
// MUX1_REGS_GRV[ 1 ]
initial
begin
	MUX1_REGS_GRV[1] = 1'b1;
end 
// MUX1_REGS_GRV[ 0 ]
initial
begin
	MUX1_REGS_GRV[0] = 1'b1;
end 
// MUX1_REGS_REP_S[ 7 ]
initial
begin
	MUX1_REGS_REP_S[7] = 1'b0;
end 
// MUX1_REGS_REP_S[ 6 ]
initial
begin
	MUX1_REGS_REP_S[6] = 1'b0;
end 
// MUX1_REGS_REP_S[ 5 ]
initial
begin
	MUX1_REGS_REP_S[5] = 1'b0;
end 
// MUX1_REGS_REP_S[ 4 ]
initial
begin
	MUX1_REGS_REP_S[4] = 1'b0;
end 
// MUX1_REGS_REP_S[ 3 ]
initial
begin
	MUX1_REGS_REP_S[3] = 1'b1;
end 
// MUX1_REGS_REP_S[ 2 ]
initial
begin
	MUX1_REGS_REP_S[2] = 1'b1;
end 
// MUX1_REGS_REP_S[ 1 ]
initial
begin
	MUX1_REGS_REP_S[1] = 1'b0;
end 
// MUX1_REGS_REP_S[ 0 ]
initial
begin
	MUX1_REGS_REP_S[0] = 1'b0;
end 
// MUX1_REGS_REP_SQ[ 7 ]
initial
begin
	MUX1_REGS_REP_SQ[7] = 1'b0;
end 
// MUX1_REGS_REP_SQ[ 6 ]
initial
begin
	MUX1_REGS_REP_SQ[6] = 1'b0;
end 
// MUX1_REGS_REP_SQ[ 5 ]
initial
begin
	MUX1_REGS_REP_SQ[5] = 1'b0;
end 
// MUX1_REGS_REP_SQ[ 4 ]
initial
begin
	MUX1_REGS_REP_SQ[4] = 1'b0;
end 
// MUX1_REGS_REP_SQ[ 3 ]
initial
begin
	MUX1_REGS_REP_SQ[3] = 1'b1;
end 
// MUX1_REGS_REP_SQ[ 2 ]
initial
begin
	MUX1_REGS_REP_SQ[2] = 1'b0;
end 
// MUX1_REGS_REP_SQ[ 1 ]
initial
begin
	MUX1_REGS_REP_SQ[1] = 1'b0;
end 
// MUX1_REGS_REP_SQ[ 0 ]
initial
begin
	MUX1_REGS_REP_SQ[0] = 1'b0;
end 

// MUX1_s2_comp1
always
begin
	MUX1_s2_comp1 = 1'b0;
	MUX1_s2_comp1 = #10000 1'b1;
	#10000;
end 

// MUX1_s1_comp1
always
begin
	MUX1_s1_comp1 = 1'b0;
	MUX1_s1_comp1 = #20000 1'b1;
	#20000;
end 

// MUX1_s_comp1
initial
begin
	repeat(16)
	begin
		MUX1_s_comp1 = 1'b0;
		MUX1_s_comp1 = #30000 1'b1;
		# 30000;
	end
	MUX1_s_comp1 = 1'b0;
	MUX1_s_comp1 = #30000 1'b1;
end 

MUX1_comp1_vlg_sample_tst tb_sample (
	.MUX1_CONT_LOCAL(MUX1_CONT_LOCAL),
	.MUX1_CT_Msg(MUX1_CT_Msg),
	.MUX1_CT_ON(MUX1_CT_ON),
	.MUX1_DISPLAY_VAL(MUX1_DISPLAY_VAL),
	.MUX1_REGS_GRV(MUX1_REGS_GRV),
	.MUX1_REGS_REP_S(MUX1_REGS_REP_S),
	.MUX1_REGS_REP_SQ(MUX1_REGS_REP_SQ),
	.MUX1_s1_comp1(MUX1_s1_comp1),
	.MUX1_s2_comp1(MUX1_s2_comp1),
	.MUX1_s_comp1(MUX1_s_comp1),
	.sampler_tx(sampler)
);

MUX1_comp1_vlg_check_tst tb_out(
	.MC(MC),
	.sampler_rx(sampler)
);
endmodule

