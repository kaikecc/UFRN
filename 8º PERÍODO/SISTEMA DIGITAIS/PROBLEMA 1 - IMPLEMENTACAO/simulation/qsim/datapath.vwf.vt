// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/01/2021 15:34:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_vlg_sample_tst(
	clk,
	clr_CT_ON,
	clr_GRV,
	clr_INAT,
	clr_Local,
	clr_Msg,
	clr_REP_S,
	clr_REP_SQ,
	clr_VAL,
	clrAddr,
	en_CT_ON,
	en_INAT,
	en_Local,
	en_Msg,
	Flag_rep_s,
	Flag_rep_sq,
	ld_GRV,
	ld_REP_S,
	ld_REP_SQ,
	ld_VAL,
	ldAddr,
	s1_comp1,
	s2_comp1,
	s_comp1,
	s_sum,
	setUni_Display,
	sl1_comp1,
	sl2_comp1,
	sl_comp1,
	soma_Display,
	subt_Display,
	sum_Display_MUX_S,
	sampler_tx
);
input  clk;
input  clr_CT_ON;
input  clr_GRV;
input  clr_INAT;
input  clr_Local;
input  clr_Msg;
input  clr_REP_S;
input  clr_REP_SQ;
input  clr_VAL;
input  clrAddr;
input  en_CT_ON;
input  en_INAT;
input  en_Local;
input  en_Msg;
input  Flag_rep_s;
input  Flag_rep_sq;
input  ld_GRV;
input  ld_REP_S;
input  ld_REP_SQ;
input  ld_VAL;
input  ldAddr;
input  s1_comp1;
input  s2_comp1;
input  s_comp1;
input  s_sum;
input  setUni_Display;
input  sl1_comp1;
input  sl2_comp1;
input  sl_comp1;
input  soma_Display;
input  subt_Display;
input  sum_Display_MUX_S;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr_CT_ON or clr_GRV or clr_INAT or clr_Local or clr_Msg or clr_REP_S or clr_REP_SQ or clr_VAL or clrAddr or en_CT_ON or en_INAT or en_Local or en_Msg or Flag_rep_s or Flag_rep_sq or ld_GRV or ld_REP_S or ld_REP_SQ or ld_VAL or ldAddr or s1_comp1 or s2_comp1 or s_comp1 or s_sum or setUni_Display or sl1_comp1 or sl2_comp1 or sl_comp1 or soma_Display or subt_Display or sum_Display_MUX_S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module datapath_vlg_check_tst (
	addrMemoria,
	Cont_Local_10,
	CT_ON_Menor_5,
	Display_EN,
	eq_Comparator,
	grt_Comparator,
	It_Comparator,
	sampler_rx
);
input [7:0] addrMemoria;
input  Cont_Local_10;
input  CT_ON_Menor_5;
input [7:0] Display_EN;
input  eq_Comparator;
input  grt_Comparator;
input  It_Comparator;
input sampler_rx;

reg [7:0] addrMemoria_expected;
reg  Cont_Local_10_expected;
reg  CT_ON_Menor_5_expected;
reg [7:0] Display_EN_expected;
reg  eq_Comparator_expected;
reg  grt_Comparator_expected;
reg  It_Comparator_expected;

reg [7:0] addrMemoria_prev;
reg  Cont_Local_10_prev;
reg  CT_ON_Menor_5_prev;
reg [7:0] Display_EN_prev;
reg  eq_Comparator_prev;
reg  grt_Comparator_prev;
reg  It_Comparator_prev;

reg [7:0] addrMemoria_expected_prev;
reg  Cont_Local_10_expected_prev;
reg  CT_ON_Menor_5_expected_prev;
reg [7:0] Display_EN_expected_prev;
reg  eq_Comparator_expected_prev;
reg  grt_Comparator_expected_prev;
reg  It_Comparator_expected_prev;

reg [7:0] last_addrMemoria_exp;
reg  last_Cont_Local_10_exp;
reg  last_CT_ON_Menor_5_exp;
reg [7:0] last_Display_EN_exp;
reg  last_eq_Comparator_exp;
reg  last_grt_Comparator_exp;
reg  last_It_Comparator_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	addrMemoria_prev = addrMemoria;
	Cont_Local_10_prev = Cont_Local_10;
	CT_ON_Menor_5_prev = CT_ON_Menor_5;
	Display_EN_prev = Display_EN;
	eq_Comparator_prev = eq_Comparator;
	grt_Comparator_prev = grt_Comparator;
	It_Comparator_prev = It_Comparator;
end

// update expected /o prevs

always @(trigger)
begin
	addrMemoria_expected_prev = addrMemoria_expected;
	Cont_Local_10_expected_prev = Cont_Local_10_expected;
	CT_ON_Menor_5_expected_prev = CT_ON_Menor_5_expected;
	Display_EN_expected_prev = Display_EN_expected;
	eq_Comparator_expected_prev = eq_Comparator_expected;
	grt_Comparator_expected_prev = grt_Comparator_expected;
	It_Comparator_expected_prev = It_Comparator_expected;
end


// expected addrMemoria[ 7 ]
initial
begin
	addrMemoria_expected[7] = 1'bX;
end 
// expected addrMemoria[ 6 ]
initial
begin
	addrMemoria_expected[6] = 1'bX;
end 
// expected addrMemoria[ 5 ]
initial
begin
	addrMemoria_expected[5] = 1'bX;
end 
// expected addrMemoria[ 4 ]
initial
begin
	addrMemoria_expected[4] = 1'bX;
end 
// expected addrMemoria[ 3 ]
initial
begin
	addrMemoria_expected[3] = 1'bX;
end 
// expected addrMemoria[ 2 ]
initial
begin
	addrMemoria_expected[2] = 1'bX;
end 
// expected addrMemoria[ 1 ]
initial
begin
	addrMemoria_expected[1] = 1'bX;
end 
// expected addrMemoria[ 0 ]
initial
begin
	addrMemoria_expected[0] = 1'bX;
end 

// expected Cont_Local_10
initial
begin
	Cont_Local_10_expected = 1'bX;
end 

// expected CT_ON_Menor_5
initial
begin
	CT_ON_Menor_5_expected = 1'bX;
end 
// expected Display_EN[ 7 ]
initial
begin
	Display_EN_expected[7] = 1'bX;
end 
// expected Display_EN[ 6 ]
initial
begin
	Display_EN_expected[6] = 1'bX;
end 
// expected Display_EN[ 5 ]
initial
begin
	Display_EN_expected[5] = 1'bX;
end 
// expected Display_EN[ 4 ]
initial
begin
	Display_EN_expected[4] = 1'bX;
end 
// expected Display_EN[ 3 ]
initial
begin
	Display_EN_expected[3] = 1'bX;
end 
// expected Display_EN[ 2 ]
initial
begin
	Display_EN_expected[2] = 1'bX;
end 
// expected Display_EN[ 1 ]
initial
begin
	Display_EN_expected[1] = 1'bX;
end 
// expected Display_EN[ 0 ]
initial
begin
	Display_EN_expected[0] = 1'bX;
end 

// expected eq_Comparator
initial
begin
	eq_Comparator_expected = 1'bX;
end 

// expected grt_Comparator
initial
begin
	grt_Comparator_expected = 1'bX;
end 

// expected It_Comparator
initial
begin
	It_Comparator_expected = 1'bX;
end 
// generate trigger
always @(addrMemoria_expected or addrMemoria or Cont_Local_10_expected or Cont_Local_10 or CT_ON_Menor_5_expected or CT_ON_Menor_5 or Display_EN_expected or Display_EN or eq_Comparator_expected or eq_Comparator or grt_Comparator_expected or grt_Comparator or It_Comparator_expected or It_Comparator)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected addrMemoria = %b | expected Cont_Local_10 = %b | expected CT_ON_Menor_5 = %b | expected Display_EN = %b | expected eq_Comparator = %b | expected grt_Comparator = %b | expected It_Comparator = %b | ",addrMemoria_expected_prev,Cont_Local_10_expected_prev,CT_ON_Menor_5_expected_prev,Display_EN_expected_prev,eq_Comparator_expected_prev,grt_Comparator_expected_prev,It_Comparator_expected_prev);
	$display("| real addrMemoria = %b | real Cont_Local_10 = %b | real CT_ON_Menor_5 = %b | real Display_EN = %b | real eq_Comparator = %b | real grt_Comparator = %b | real It_Comparator = %b | ",addrMemoria_prev,Cont_Local_10_prev,CT_ON_Menor_5_prev,Display_EN_prev,eq_Comparator_prev,grt_Comparator_prev,It_Comparator_prev);
`endif
	if (
		( addrMemoria_expected_prev[0] !== 1'bx ) && ( addrMemoria_prev[0] !== addrMemoria_expected_prev[0] )
		&& ((addrMemoria_expected_prev[0] !== last_addrMemoria_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addrMemoria[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addrMemoria_expected_prev);
		$display ("     Real value = %b", addrMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addrMemoria_exp[0] = addrMemoria_expected_prev[0];
	end
	if (
		( addrMemoria_expected_prev[1] !== 1'bx ) && ( addrMemoria_prev[1] !== addrMemoria_expected_prev[1] )
		&& ((addrMemoria_expected_prev[1] !== last_addrMemoria_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addrMemoria[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addrMemoria_expected_prev);
		$display ("     Real value = %b", addrMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addrMemoria_exp[1] = addrMemoria_expected_prev[1];
	end
	if (
		( addrMemoria_expected_prev[2] !== 1'bx ) && ( addrMemoria_prev[2] !== addrMemoria_expected_prev[2] )
		&& ((addrMemoria_expected_prev[2] !== last_addrMemoria_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addrMemoria[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addrMemoria_expected_prev);
		$display ("     Real value = %b", addrMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addrMemoria_exp[2] = addrMemoria_expected_prev[2];
	end
	if (
		( addrMemoria_expected_prev[3] !== 1'bx ) && ( addrMemoria_prev[3] !== addrMemoria_expected_prev[3] )
		&& ((addrMemoria_expected_prev[3] !== last_addrMemoria_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addrMemoria[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addrMemoria_expected_prev);
		$display ("     Real value = %b", addrMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addrMemoria_exp[3] = addrMemoria_expected_prev[3];
	end
	if (
		( addrMemoria_expected_prev[4] !== 1'bx ) && ( addrMemoria_prev[4] !== addrMemoria_expected_prev[4] )
		&& ((addrMemoria_expected_prev[4] !== last_addrMemoria_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addrMemoria[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addrMemoria_expected_prev);
		$display ("     Real value = %b", addrMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addrMemoria_exp[4] = addrMemoria_expected_prev[4];
	end
	if (
		( addrMemoria_expected_prev[5] !== 1'bx ) && ( addrMemoria_prev[5] !== addrMemoria_expected_prev[5] )
		&& ((addrMemoria_expected_prev[5] !== last_addrMemoria_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addrMemoria[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addrMemoria_expected_prev);
		$display ("     Real value = %b", addrMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addrMemoria_exp[5] = addrMemoria_expected_prev[5];
	end
	if (
		( addrMemoria_expected_prev[6] !== 1'bx ) && ( addrMemoria_prev[6] !== addrMemoria_expected_prev[6] )
		&& ((addrMemoria_expected_prev[6] !== last_addrMemoria_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addrMemoria[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addrMemoria_expected_prev);
		$display ("     Real value = %b", addrMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addrMemoria_exp[6] = addrMemoria_expected_prev[6];
	end
	if (
		( addrMemoria_expected_prev[7] !== 1'bx ) && ( addrMemoria_prev[7] !== addrMemoria_expected_prev[7] )
		&& ((addrMemoria_expected_prev[7] !== last_addrMemoria_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port addrMemoria[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", addrMemoria_expected_prev);
		$display ("     Real value = %b", addrMemoria_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_addrMemoria_exp[7] = addrMemoria_expected_prev[7];
	end
	if (
		( Cont_Local_10_expected_prev !== 1'bx ) && ( Cont_Local_10_prev !== Cont_Local_10_expected_prev )
		&& ((Cont_Local_10_expected_prev !== last_Cont_Local_10_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cont_Local_10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cont_Local_10_expected_prev);
		$display ("     Real value = %b", Cont_Local_10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cont_Local_10_exp = Cont_Local_10_expected_prev;
	end
	if (
		( CT_ON_Menor_5_expected_prev !== 1'bx ) && ( CT_ON_Menor_5_prev !== CT_ON_Menor_5_expected_prev )
		&& ((CT_ON_Menor_5_expected_prev !== last_CT_ON_Menor_5_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CT_ON_Menor_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CT_ON_Menor_5_expected_prev);
		$display ("     Real value = %b", CT_ON_Menor_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CT_ON_Menor_5_exp = CT_ON_Menor_5_expected_prev;
	end
	if (
		( Display_EN_expected_prev[0] !== 1'bx ) && ( Display_EN_prev[0] !== Display_EN_expected_prev[0] )
		&& ((Display_EN_expected_prev[0] !== last_Display_EN_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display_EN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display_EN_expected_prev);
		$display ("     Real value = %b", Display_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display_EN_exp[0] = Display_EN_expected_prev[0];
	end
	if (
		( Display_EN_expected_prev[1] !== 1'bx ) && ( Display_EN_prev[1] !== Display_EN_expected_prev[1] )
		&& ((Display_EN_expected_prev[1] !== last_Display_EN_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display_EN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display_EN_expected_prev);
		$display ("     Real value = %b", Display_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display_EN_exp[1] = Display_EN_expected_prev[1];
	end
	if (
		( Display_EN_expected_prev[2] !== 1'bx ) && ( Display_EN_prev[2] !== Display_EN_expected_prev[2] )
		&& ((Display_EN_expected_prev[2] !== last_Display_EN_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display_EN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display_EN_expected_prev);
		$display ("     Real value = %b", Display_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display_EN_exp[2] = Display_EN_expected_prev[2];
	end
	if (
		( Display_EN_expected_prev[3] !== 1'bx ) && ( Display_EN_prev[3] !== Display_EN_expected_prev[3] )
		&& ((Display_EN_expected_prev[3] !== last_Display_EN_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display_EN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display_EN_expected_prev);
		$display ("     Real value = %b", Display_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display_EN_exp[3] = Display_EN_expected_prev[3];
	end
	if (
		( Display_EN_expected_prev[4] !== 1'bx ) && ( Display_EN_prev[4] !== Display_EN_expected_prev[4] )
		&& ((Display_EN_expected_prev[4] !== last_Display_EN_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display_EN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display_EN_expected_prev);
		$display ("     Real value = %b", Display_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display_EN_exp[4] = Display_EN_expected_prev[4];
	end
	if (
		( Display_EN_expected_prev[5] !== 1'bx ) && ( Display_EN_prev[5] !== Display_EN_expected_prev[5] )
		&& ((Display_EN_expected_prev[5] !== last_Display_EN_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display_EN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display_EN_expected_prev);
		$display ("     Real value = %b", Display_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display_EN_exp[5] = Display_EN_expected_prev[5];
	end
	if (
		( Display_EN_expected_prev[6] !== 1'bx ) && ( Display_EN_prev[6] !== Display_EN_expected_prev[6] )
		&& ((Display_EN_expected_prev[6] !== last_Display_EN_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display_EN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display_EN_expected_prev);
		$display ("     Real value = %b", Display_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display_EN_exp[6] = Display_EN_expected_prev[6];
	end
	if (
		( Display_EN_expected_prev[7] !== 1'bx ) && ( Display_EN_prev[7] !== Display_EN_expected_prev[7] )
		&& ((Display_EN_expected_prev[7] !== last_Display_EN_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Display_EN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Display_EN_expected_prev);
		$display ("     Real value = %b", Display_EN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Display_EN_exp[7] = Display_EN_expected_prev[7];
	end
	if (
		( eq_Comparator_expected_prev !== 1'bx ) && ( eq_Comparator_prev !== eq_Comparator_expected_prev )
		&& ((eq_Comparator_expected_prev !== last_eq_Comparator_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port eq_Comparator :: @time = %t",  $realtime);
		$display ("     Expected value = %b", eq_Comparator_expected_prev);
		$display ("     Real value = %b", eq_Comparator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_eq_Comparator_exp = eq_Comparator_expected_prev;
	end
	if (
		( grt_Comparator_expected_prev !== 1'bx ) && ( grt_Comparator_prev !== grt_Comparator_expected_prev )
		&& ((grt_Comparator_expected_prev !== last_grt_Comparator_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port grt_Comparator :: @time = %t",  $realtime);
		$display ("     Expected value = %b", grt_Comparator_expected_prev);
		$display ("     Real value = %b", grt_Comparator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_grt_Comparator_exp = grt_Comparator_expected_prev;
	end
	if (
		( It_Comparator_expected_prev !== 1'bx ) && ( It_Comparator_prev !== It_Comparator_expected_prev )
		&& ((It_Comparator_expected_prev !== last_It_Comparator_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port It_Comparator :: @time = %t",  $realtime);
		$display ("     Expected value = %b", It_Comparator_expected_prev);
		$display ("     Real value = %b", It_Comparator_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_It_Comparator_exp = It_Comparator_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr_CT_ON;
reg clr_GRV;
reg clr_INAT;
reg clr_Local;
reg clr_Msg;
reg clr_REP_S;
reg clr_REP_SQ;
reg clr_VAL;
reg clrAddr;
reg en_CT_ON;
reg en_INAT;
reg en_Local;
reg en_Msg;
reg Flag_rep_s;
reg Flag_rep_sq;
reg ld_GRV;
reg ld_REP_S;
reg ld_REP_SQ;
reg ld_VAL;
reg ldAddr;
reg s1_comp1;
reg s2_comp1;
reg s_comp1;
reg s_sum;
reg setUni_Display;
reg sl1_comp1;
reg sl2_comp1;
reg sl_comp1;
reg soma_Display;
reg subt_Display;
reg sum_Display_MUX_S;
// wires                                               
wire [7:0] addrMemoria;
wire Cont_Local_10;
wire CT_ON_Menor_5;
wire [7:0] Display_EN;
wire eq_Comparator;
wire grt_Comparator;
wire It_Comparator;

wire sampler;                             

// assign statements (if any)                          
datapath i1 (
// port map - connection between master ports and signals/registers   
	.addrMemoria(addrMemoria),
	.clk(clk),
	.clr_CT_ON(clr_CT_ON),
	.clr_GRV(clr_GRV),
	.clr_INAT(clr_INAT),
	.clr_Local(clr_Local),
	.clr_Msg(clr_Msg),
	.clr_REP_S(clr_REP_S),
	.clr_REP_SQ(clr_REP_SQ),
	.clr_VAL(clr_VAL),
	.clrAddr(clrAddr),
	.Cont_Local_10(Cont_Local_10),
	.CT_ON_Menor_5(CT_ON_Menor_5),
	.Display_EN(Display_EN),
	.en_CT_ON(en_CT_ON),
	.en_INAT(en_INAT),
	.en_Local(en_Local),
	.en_Msg(en_Msg),
	.eq_Comparator(eq_Comparator),
	.Flag_rep_s(Flag_rep_s),
	.Flag_rep_sq(Flag_rep_sq),
	.grt_Comparator(grt_Comparator),
	.It_Comparator(It_Comparator),
	.ld_GRV(ld_GRV),
	.ld_REP_S(ld_REP_S),
	.ld_REP_SQ(ld_REP_SQ),
	.ld_VAL(ld_VAL),
	.ldAddr(ldAddr),
	.s1_comp1(s1_comp1),
	.s2_comp1(s2_comp1),
	.s_comp1(s_comp1),
	.s_sum(s_sum),
	.setUni_Display(setUni_Display),
	.sl1_comp1(sl1_comp1),
	.sl2_comp1(sl2_comp1),
	.sl_comp1(sl_comp1),
	.soma_Display(soma_Display),
	.subt_Display(subt_Display),
	.sum_Display_MUX_S(sum_Display_MUX_S)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// clr_CT_ON
initial
begin
	clr_CT_ON = 1'b0;
end 

// clr_GRV
initial
begin
	clr_GRV = 1'b0;
end 

// clr_INAT
initial
begin
	clr_INAT = 1'b0;
end 

// clr_Local
initial
begin
	clr_Local = 1'b0;
end 

// clr_Msg
initial
begin
	clr_Msg = 1'b0;
end 

// clr_REP_S
initial
begin
	clr_REP_S = 1'b0;
end 

// clr_REP_SQ
initial
begin
	clr_REP_SQ = 1'b0;
end 

// clr_VAL
initial
begin
	clr_VAL = 1'b0;
end 

// clrAddr
initial
begin
	clrAddr = 1'b0;
end 

// en_CT_ON
initial
begin
	en_CT_ON = 1'b0;
end 

// en_INAT
initial
begin
	en_INAT = 1'b0;
end 

// en_Local
initial
begin
	en_Local = 1'b0;
end 

// en_Msg
initial
begin
	en_Msg = 1'b0;
end 

// Flag_rep_s
initial
begin
	Flag_rep_s = 1'b0;
end 

// Flag_rep_sq
initial
begin
	Flag_rep_sq = 1'b0;
end 

// ld_GRV
initial
begin
	ld_GRV = 1'b0;
end 

// ld_REP_S
initial
begin
	ld_REP_S = 1'b0;
end 

// ld_REP_SQ
initial
begin
	ld_REP_SQ = 1'b0;
end 

// ld_VAL
initial
begin
	ld_VAL = 1'b0;
end 

// ldAddr
initial
begin
	ldAddr = 1'b0;
end 

// s1_comp1
initial
begin
	s1_comp1 = 1'b0;
end 

// s2_comp1
initial
begin
	s2_comp1 = 1'b0;
end 

// s_comp1
initial
begin
	s_comp1 = 1'b0;
end 

// s_sum
initial
begin
	s_sum = 1'b0;
end 

// setUni_Display
initial
begin
	setUni_Display = 1'b0;
end 

// sl1_comp1
initial
begin
	sl1_comp1 = 1'b0;
end 

// sl2_comp1
initial
begin
	sl2_comp1 = 1'b0;
end 

// sl_comp1
initial
begin
	sl_comp1 = 1'b0;
end 

// soma_Display
initial
begin
	soma_Display = 1'b0;
end 

// subt_Display
initial
begin
	subt_Display = 1'b0;
end 

// sum_Display_MUX_S
initial
begin
	sum_Display_MUX_S = 1'b0;
end 

datapath_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr_CT_ON(clr_CT_ON),
	.clr_GRV(clr_GRV),
	.clr_INAT(clr_INAT),
	.clr_Local(clr_Local),
	.clr_Msg(clr_Msg),
	.clr_REP_S(clr_REP_S),
	.clr_REP_SQ(clr_REP_SQ),
	.clr_VAL(clr_VAL),
	.clrAddr(clrAddr),
	.en_CT_ON(en_CT_ON),
	.en_INAT(en_INAT),
	.en_Local(en_Local),
	.en_Msg(en_Msg),
	.Flag_rep_s(Flag_rep_s),
	.Flag_rep_sq(Flag_rep_sq),
	.ld_GRV(ld_GRV),
	.ld_REP_S(ld_REP_S),
	.ld_REP_SQ(ld_REP_SQ),
	.ld_VAL(ld_VAL),
	.ldAddr(ldAddr),
	.s1_comp1(s1_comp1),
	.s2_comp1(s2_comp1),
	.s_comp1(s_comp1),
	.s_sum(s_sum),
	.setUni_Display(setUni_Display),
	.sl1_comp1(sl1_comp1),
	.sl2_comp1(sl2_comp1),
	.sl_comp1(sl_comp1),
	.soma_Display(soma_Display),
	.subt_Display(subt_Display),
	.sum_Display_MUX_S(sum_Display_MUX_S),
	.sampler_tx(sampler)
);

datapath_vlg_check_tst tb_out(
	.addrMemoria(addrMemoria),
	.Cont_Local_10(Cont_Local_10),
	.CT_ON_Menor_5(CT_ON_Menor_5),
	.Display_EN(Display_EN),
	.eq_Comparator(eq_Comparator),
	.grt_Comparator(grt_Comparator),
	.It_Comparator(It_Comparator),
	.sampler_rx(sampler)
);
endmodule

