// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Web Edition"

// DATE "01/30/2021 11:35:37"

// 
// Device: Altera EP4CGX15BF14C6 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module MUX_S (
	ENTA_S,
	ENTB_S,
	SEL_S,
	S_S);
input 	[7:0] ENTA_S;
input 	[7:0] ENTB_S;
input 	SEL_S;
output 	[7:0] S_S;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \S_S[0]~output_o ;
wire \S_S[1]~output_o ;
wire \S_S[2]~output_o ;
wire \S_S[3]~output_o ;
wire \S_S[4]~output_o ;
wire \S_S[5]~output_o ;
wire \S_S[6]~output_o ;
wire \S_S[7]~output_o ;
wire \ENTB_S[0]~input_o ;
wire \ENTA_S[0]~input_o ;
wire \SEL_S~input_o ;
wire \M0|Saida~0_combout ;
wire \ENTB_S[1]~input_o ;
wire \ENTA_S[1]~input_o ;
wire \M1|Saida~0_combout ;
wire \ENTB_S[2]~input_o ;
wire \ENTA_S[2]~input_o ;
wire \M2|Saida~0_combout ;
wire \ENTB_S[3]~input_o ;
wire \ENTA_S[3]~input_o ;
wire \M3|Saida~0_combout ;
wire \ENTB_S[4]~input_o ;
wire \ENTA_S[4]~input_o ;
wire \M4|Saida~0_combout ;
wire \ENTB_S[5]~input_o ;
wire \ENTA_S[5]~input_o ;
wire \M5|Saida~0_combout ;
wire \ENTB_S[6]~input_o ;
wire \ENTA_S[6]~input_o ;
wire \M6|Saida~0_combout ;
wire \ENTB_S[7]~input_o ;
wire \ENTA_S[7]~input_o ;
wire \M7|Saida~0_combout ;


cycloneiv_io_obuf \S_S[0]~output (
	.i(\M0|Saida~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S_S[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \S_S[0]~output .bus_hold = "false";
defparam \S_S[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \S_S[1]~output (
	.i(\M1|Saida~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S_S[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \S_S[1]~output .bus_hold = "false";
defparam \S_S[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \S_S[2]~output (
	.i(\M2|Saida~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S_S[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \S_S[2]~output .bus_hold = "false";
defparam \S_S[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \S_S[3]~output (
	.i(\M3|Saida~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S_S[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \S_S[3]~output .bus_hold = "false";
defparam \S_S[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \S_S[4]~output (
	.i(\M4|Saida~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S_S[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \S_S[4]~output .bus_hold = "false";
defparam \S_S[4]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \S_S[5]~output (
	.i(\M5|Saida~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S_S[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \S_S[5]~output .bus_hold = "false";
defparam \S_S[5]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \S_S[6]~output (
	.i(\M6|Saida~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S_S[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \S_S[6]~output .bus_hold = "false";
defparam \S_S[6]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_obuf \S_S[7]~output (
	.i(\M7|Saida~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S_S[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \S_S[7]~output .bus_hold = "false";
defparam \S_S[7]~output .open_drain_output = "false";
// synopsys translate_on

cycloneiv_io_ibuf \ENTB_S[0]~input (
	.i(ENTB_S[0]),
	.ibar(gnd),
	.o(\ENTB_S[0]~input_o ));
// synopsys translate_off
defparam \ENTB_S[0]~input .bus_hold = "false";
defparam \ENTB_S[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \ENTA_S[0]~input (
	.i(ENTA_S[0]),
	.ibar(gnd),
	.o(\ENTA_S[0]~input_o ));
// synopsys translate_off
defparam \ENTA_S[0]~input .bus_hold = "false";
defparam \ENTA_S[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \SEL_S~input (
	.i(SEL_S),
	.ibar(gnd),
	.o(\SEL_S~input_o ));
// synopsys translate_off
defparam \SEL_S~input .bus_hold = "false";
defparam \SEL_S~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \M0|Saida~0 (
// Equation(s):
// \M0|Saida~0_combout  = (\SEL_S~input_o  & (\ENTB_S[0]~input_o )) # (!\SEL_S~input_o  & ((\ENTA_S[0]~input_o )))

	.dataa(\ENTB_S[0]~input_o ),
	.datab(\ENTA_S[0]~input_o ),
	.datac(gnd),
	.datad(\SEL_S~input_o ),
	.cin(gnd),
	.combout(\M0|Saida~0_combout ),
	.cout());
// synopsys translate_off
defparam \M0|Saida~0 .lut_mask = 16'hAACC;
defparam \M0|Saida~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \ENTB_S[1]~input (
	.i(ENTB_S[1]),
	.ibar(gnd),
	.o(\ENTB_S[1]~input_o ));
// synopsys translate_off
defparam \ENTB_S[1]~input .bus_hold = "false";
defparam \ENTB_S[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \ENTA_S[1]~input (
	.i(ENTA_S[1]),
	.ibar(gnd),
	.o(\ENTA_S[1]~input_o ));
// synopsys translate_off
defparam \ENTA_S[1]~input .bus_hold = "false";
defparam \ENTA_S[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \M1|Saida~0 (
// Equation(s):
// \M1|Saida~0_combout  = (\SEL_S~input_o  & (\ENTB_S[1]~input_o )) # (!\SEL_S~input_o  & ((\ENTA_S[1]~input_o )))

	.dataa(\ENTB_S[1]~input_o ),
	.datab(\ENTA_S[1]~input_o ),
	.datac(gnd),
	.datad(\SEL_S~input_o ),
	.cin(gnd),
	.combout(\M1|Saida~0_combout ),
	.cout());
// synopsys translate_off
defparam \M1|Saida~0 .lut_mask = 16'hAACC;
defparam \M1|Saida~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \ENTB_S[2]~input (
	.i(ENTB_S[2]),
	.ibar(gnd),
	.o(\ENTB_S[2]~input_o ));
// synopsys translate_off
defparam \ENTB_S[2]~input .bus_hold = "false";
defparam \ENTB_S[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \ENTA_S[2]~input (
	.i(ENTA_S[2]),
	.ibar(gnd),
	.o(\ENTA_S[2]~input_o ));
// synopsys translate_off
defparam \ENTA_S[2]~input .bus_hold = "false";
defparam \ENTA_S[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \M2|Saida~0 (
// Equation(s):
// \M2|Saida~0_combout  = (\SEL_S~input_o  & (\ENTB_S[2]~input_o )) # (!\SEL_S~input_o  & ((\ENTA_S[2]~input_o )))

	.dataa(\ENTB_S[2]~input_o ),
	.datab(\ENTA_S[2]~input_o ),
	.datac(gnd),
	.datad(\SEL_S~input_o ),
	.cin(gnd),
	.combout(\M2|Saida~0_combout ),
	.cout());
// synopsys translate_off
defparam \M2|Saida~0 .lut_mask = 16'hAACC;
defparam \M2|Saida~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \ENTB_S[3]~input (
	.i(ENTB_S[3]),
	.ibar(gnd),
	.o(\ENTB_S[3]~input_o ));
// synopsys translate_off
defparam \ENTB_S[3]~input .bus_hold = "false";
defparam \ENTB_S[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \ENTA_S[3]~input (
	.i(ENTA_S[3]),
	.ibar(gnd),
	.o(\ENTA_S[3]~input_o ));
// synopsys translate_off
defparam \ENTA_S[3]~input .bus_hold = "false";
defparam \ENTA_S[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \M3|Saida~0 (
// Equation(s):
// \M3|Saida~0_combout  = (\SEL_S~input_o  & (\ENTB_S[3]~input_o )) # (!\SEL_S~input_o  & ((\ENTA_S[3]~input_o )))

	.dataa(\ENTB_S[3]~input_o ),
	.datab(\ENTA_S[3]~input_o ),
	.datac(gnd),
	.datad(\SEL_S~input_o ),
	.cin(gnd),
	.combout(\M3|Saida~0_combout ),
	.cout());
// synopsys translate_off
defparam \M3|Saida~0 .lut_mask = 16'hAACC;
defparam \M3|Saida~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \ENTB_S[4]~input (
	.i(ENTB_S[4]),
	.ibar(gnd),
	.o(\ENTB_S[4]~input_o ));
// synopsys translate_off
defparam \ENTB_S[4]~input .bus_hold = "false";
defparam \ENTB_S[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \ENTA_S[4]~input (
	.i(ENTA_S[4]),
	.ibar(gnd),
	.o(\ENTA_S[4]~input_o ));
// synopsys translate_off
defparam \ENTA_S[4]~input .bus_hold = "false";
defparam \ENTA_S[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \M4|Saida~0 (
// Equation(s):
// \M4|Saida~0_combout  = (\SEL_S~input_o  & (\ENTB_S[4]~input_o )) # (!\SEL_S~input_o  & ((\ENTA_S[4]~input_o )))

	.dataa(\ENTB_S[4]~input_o ),
	.datab(\ENTA_S[4]~input_o ),
	.datac(gnd),
	.datad(\SEL_S~input_o ),
	.cin(gnd),
	.combout(\M4|Saida~0_combout ),
	.cout());
// synopsys translate_off
defparam \M4|Saida~0 .lut_mask = 16'hAACC;
defparam \M4|Saida~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \ENTB_S[5]~input (
	.i(ENTB_S[5]),
	.ibar(gnd),
	.o(\ENTB_S[5]~input_o ));
// synopsys translate_off
defparam \ENTB_S[5]~input .bus_hold = "false";
defparam \ENTB_S[5]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \ENTA_S[5]~input (
	.i(ENTA_S[5]),
	.ibar(gnd),
	.o(\ENTA_S[5]~input_o ));
// synopsys translate_off
defparam \ENTA_S[5]~input .bus_hold = "false";
defparam \ENTA_S[5]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \M5|Saida~0 (
// Equation(s):
// \M5|Saida~0_combout  = (\SEL_S~input_o  & (\ENTB_S[5]~input_o )) # (!\SEL_S~input_o  & ((\ENTA_S[5]~input_o )))

	.dataa(\ENTB_S[5]~input_o ),
	.datab(\ENTA_S[5]~input_o ),
	.datac(gnd),
	.datad(\SEL_S~input_o ),
	.cin(gnd),
	.combout(\M5|Saida~0_combout ),
	.cout());
// synopsys translate_off
defparam \M5|Saida~0 .lut_mask = 16'hAACC;
defparam \M5|Saida~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \ENTB_S[6]~input (
	.i(ENTB_S[6]),
	.ibar(gnd),
	.o(\ENTB_S[6]~input_o ));
// synopsys translate_off
defparam \ENTB_S[6]~input .bus_hold = "false";
defparam \ENTB_S[6]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \ENTA_S[6]~input (
	.i(ENTA_S[6]),
	.ibar(gnd),
	.o(\ENTA_S[6]~input_o ));
// synopsys translate_off
defparam \ENTA_S[6]~input .bus_hold = "false";
defparam \ENTA_S[6]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \M6|Saida~0 (
// Equation(s):
// \M6|Saida~0_combout  = (\SEL_S~input_o  & (\ENTB_S[6]~input_o )) # (!\SEL_S~input_o  & ((\ENTA_S[6]~input_o )))

	.dataa(\ENTB_S[6]~input_o ),
	.datab(\ENTA_S[6]~input_o ),
	.datac(gnd),
	.datad(\SEL_S~input_o ),
	.cin(gnd),
	.combout(\M6|Saida~0_combout ),
	.cout());
// synopsys translate_off
defparam \M6|Saida~0 .lut_mask = 16'hAACC;
defparam \M6|Saida~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneiv_io_ibuf \ENTB_S[7]~input (
	.i(ENTB_S[7]),
	.ibar(gnd),
	.o(\ENTB_S[7]~input_o ));
// synopsys translate_off
defparam \ENTB_S[7]~input .bus_hold = "false";
defparam \ENTB_S[7]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_io_ibuf \ENTA_S[7]~input (
	.i(ENTA_S[7]),
	.ibar(gnd),
	.o(\ENTA_S[7]~input_o ));
// synopsys translate_off
defparam \ENTA_S[7]~input .bus_hold = "false";
defparam \ENTA_S[7]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneiv_lcell_comb \M7|Saida~0 (
// Equation(s):
// \M7|Saida~0_combout  = (\SEL_S~input_o  & (\ENTB_S[7]~input_o )) # (!\SEL_S~input_o  & ((\ENTA_S[7]~input_o )))

	.dataa(\ENTB_S[7]~input_o ),
	.datab(\ENTA_S[7]~input_o ),
	.datac(gnd),
	.datad(\SEL_S~input_o ),
	.cin(gnd),
	.combout(\M7|Saida~0_combout ),
	.cout());
// synopsys translate_off
defparam \M7|Saida~0 .lut_mask = 16'hAACC;
defparam \M7|Saida~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign S_S[0] = \S_S[0]~output_o ;

assign S_S[1] = \S_S[1]~output_o ;

assign S_S[2] = \S_S[2]~output_o ;

assign S_S[3] = \S_S[3]~output_o ;

assign S_S[4] = \S_S[4]~output_o ;

assign S_S[5] = \S_S[5]~output_o ;

assign S_S[6] = \S_S[6]~output_o ;

assign S_S[7] = \S_S[7]~output_o ;

endmodule
