// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/28/2021 17:49:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux8x1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux8x1_vlg_sample_tst(
	E_IN,
	SL,
	sampler_tx
);
input [7:0] E_IN;
input [2:0] SL;
output sampler_tx;

reg sample;
time current_time;
always @(E_IN or SL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux8x1_vlg_check_tst (
	M8,
	sampler_rx
);
input  M8;
input sampler_rx;

reg  M8_expected;

reg  M8_prev;

reg  M8_expected_prev;

reg  last_M8_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	M8_prev = M8;
end

// update expected /o prevs

always @(trigger)
begin
	M8_expected_prev = M8_expected;
end



// expected M8
initial
begin
	M8_expected = 1'bX;
end 
// generate trigger
always @(M8_expected or M8)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected M8 = %b | ",M8_expected_prev);
	$display("| real M8 = %b | ",M8_prev);
`endif
	if (
		( M8_expected_prev !== 1'bx ) && ( M8_prev !== M8_expected_prev )
		&& ((M8_expected_prev !== last_M8_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M8_expected_prev);
		$display ("     Real value = %b", M8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M8_exp = M8_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux8x1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] E_IN;
reg [2:0] SL;
// wires                                               
wire M8;

wire sampler;                             

// assign statements (if any)                          
mux8x1 i1 (
// port map - connection between master ports and signals/registers   
	.E_IN(E_IN),
	.M8(M8),
	.SL(SL)
);
// E_IN[ 7 ]
initial
begin
	E_IN[7] = 1'b0;
	E_IN[7] = #70000 1'b1;
	E_IN[7] = #10000 1'b0;
end 
// E_IN[ 6 ]
initial
begin
	E_IN[6] = 1'b0;
	E_IN[6] = #70000 1'b1;
	E_IN[6] = #10000 1'b0;
end 
// E_IN[ 5 ]
initial
begin
	E_IN[5] = 1'b0;
	E_IN[5] = #70000 1'b1;
	E_IN[5] = #10000 1'b0;
end 
// E_IN[ 4 ]
initial
begin
	E_IN[4] = 1'b0;
	E_IN[4] = #10000 1'b1;
	E_IN[4] = #10000 1'b0;
	E_IN[4] = #50000 1'b1;
	E_IN[4] = #10000 1'b0;
end 
// E_IN[ 3 ]
initial
begin
	E_IN[3] = 1'b0;
	E_IN[3] = #70000 1'b1;
	E_IN[3] = #10000 1'b0;
end 
// E_IN[ 2 ]
initial
begin
	E_IN[2] = 1'b0;
	E_IN[2] = #70000 1'b1;
	E_IN[2] = #10000 1'b0;
	E_IN[2] = #330000 1'b1;
	E_IN[2] = #50000 1'b0;
end 
// E_IN[ 1 ]
initial
begin
	E_IN[1] = 1'b0;
	E_IN[1] = #70000 1'b1;
	E_IN[1] = #10000 1'b0;
end 
// E_IN[ 0 ]
initial
begin
	E_IN[0] = 1'b0;
	E_IN[0] = #70000 1'b1;
	E_IN[0] = #10000 1'b0;
	E_IN[0] = #420000 1'b1;
	E_IN[0] = #50000 1'b0;
end 
// SL[ 2 ]
initial
begin
	SL[2] = 1'b1;
	SL[2] = #100000 1'b0;
	SL[2] = #50000 1'b1;
	SL[2] = #50000 1'b0;
	SL[2] = #100000 1'b1;
	SL[2] = #100000 1'b0;
	SL[2] = #150000 1'b1;
	SL[2] = #50000 1'b0;
	SL[2] = #100000 1'b1;
	SL[2] = #100000 1'b0;
	SL[2] = #100000 1'b1;
end 
// SL[ 1 ]
initial
begin
	SL[1] = 1'b1;
	SL[1] = #100000 1'b0;
	SL[1] = #150000 1'b1;
	SL[1] = #50000 1'b0;
	SL[1] = #100000 1'b1;
	SL[1] = #100000 1'b0;
	SL[1] = #200000 1'b1;
	SL[1] = #50000 1'b0;
	SL[1] = #50000 1'b1;
	SL[1] = #100000 1'b0;
	SL[1] = #50000 1'b1;
end 
// SL[ 0 ]
initial
begin
	SL[0] = 1'b0;
	SL[0] = #50000 1'b1;
	SL[0] = #50000 1'b0;
	SL[0] = #100000 1'b1;
	SL[0] = #100000 1'b0;
	SL[0] = #250000 1'b1;
	SL[0] = #50000 1'b0;
	SL[0] = #300000 1'b1;
	SL[0] = #50000 1'b0;
end 

mux8x1_vlg_sample_tst tb_sample (
	.E_IN(E_IN),
	.SL(SL),
	.sampler_tx(sampler)
);

mux8x1_vlg_check_tst tb_out(
	.M8(M8),
	.sampler_rx(sampler)
);
endmodule

