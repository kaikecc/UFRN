-- REGISTRADOR SIMPLES DE 4 BITS
-- ATENÇÃO!!!
-- IMPORTAR O COMPONENTE FFD PARA QUE POSSA FUNCIONAR ESSE SCRIPT
--
--
-- 
-- 

entity reg4bit is -- esse nome tem q ser o mesmo do arq.vhd
  port( 
  clock2: in bit; -- por falta de criatividade criei clock2, mas é só um clock normal
  RESET: in bit;  -- para limpar os ffds do reg de 4 bits
  ENT: in bit_vector(3 downto 0); -- entrada do registrador de 4 bits
  
  Qs: out bit_vector(3 downto 0)); -- saida do registrador de 4 bits
  
end;

architecture ckto of reg4bit is

-- importando o componente flip flop tipo D para compor o reg4 bits 
component ffd IS
port ( clk ,D ,P , C : IN BIT ;
q : OUT BIT );
end component;

signal Q: bit_vector(3 downto 0);

 

  begin
    
-- ATENÇÃO A ESTRUTURA!

-- NOME_QUALQUER: NOME_COMPONENTE port map(
--                 ENTRADA => VARIÁVEL_ENTRADA,
--                 SAÍDA = > VARIÁVEL_SAÍDA); 

   D0: ffd port map(
   clk => clock2,
   D => ENT(0),
   P => '1', -- VERIFICAR ISSO
   C => RESET, -- VERIFICAR ISSO
   q => Q(0));
   
  D1: ffd port map(
   clk => clock2,
   D => ENT(1),
   P => '1', -- VERIFICAR ISSO
   C => RESET, -- VERIFICAR ISSO
   q => Q(1));
   
  D2: ffd port map(
   clk => clock2,
   D => ENT(2),
   P => '1', -- VERIFICAR ISSO
   C => RESET, -- VERIFICAR ISSO
   q => Q(2));
   
  D3: ffd port map(
   clk => clock2,
   D => ENT(3),
   P => '1', -- VERIFICAR ISSO
   C => RESET, -- VERIFICAR ISSO
   q => Q(3));
   
 Qs <= Q; 
 
end ckto;
