// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/15/2020 13:06:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    fifo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fifo_vlg_sample_tst(
	clk_fifo,
	rd_fifo,
	reset_fifo,
	wr_data_fifo,
	wr_fifo,
	sampler_tx
);
input  clk_fifo;
input  rd_fifo;
input  reset_fifo;
input [12:0] wr_data_fifo;
input  wr_fifo;
output sampler_tx;

reg sample;
time current_time;
always @(clk_fifo or rd_fifo or reset_fifo or wr_data_fifo or wr_fifo)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module fifo_vlg_check_tst (
	CF,
	CT,
	em,
	fu,
	rd_data_fifo,
	ss,
	sampler_rx
);
input [3:0] CF;
input [3:0] CT;
input  em;
input  fu;
input [12:0] rd_data_fifo;
input  ss;
input sampler_rx;

reg [3:0] CF_expected;
reg [3:0] CT_expected;
reg  em_expected;
reg  fu_expected;
reg [12:0] rd_data_fifo_expected;
reg  ss_expected;

reg [3:0] CF_prev;
reg [3:0] CT_prev;
reg  em_prev;
reg  fu_prev;
reg [12:0] rd_data_fifo_prev;
reg  ss_prev;

reg [3:0] CF_expected_prev;
reg [3:0] CT_expected_prev;
reg  em_expected_prev;
reg  fu_expected_prev;
reg [12:0] rd_data_fifo_expected_prev;
reg  ss_expected_prev;

reg [3:0] last_CF_exp;
reg [3:0] last_CT_exp;
reg  last_em_exp;
reg  last_fu_exp;
reg [12:0] last_rd_data_fifo_exp;
reg  last_ss_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	CF_prev = CF;
	CT_prev = CT;
	em_prev = em;
	fu_prev = fu;
	rd_data_fifo_prev = rd_data_fifo;
	ss_prev = ss;
end

// update expected /o prevs

always @(trigger)
begin
	CF_expected_prev = CF_expected;
	CT_expected_prev = CT_expected;
	em_expected_prev = em_expected;
	fu_expected_prev = fu_expected;
	rd_data_fifo_expected_prev = rd_data_fifo_expected;
	ss_expected_prev = ss_expected;
end


// expected CF[ 3 ]
initial
begin
	CF_expected[3] = 1'bX;
end 
// expected CF[ 2 ]
initial
begin
	CF_expected[2] = 1'bX;
end 
// expected CF[ 1 ]
initial
begin
	CF_expected[1] = 1'bX;
end 
// expected CF[ 0 ]
initial
begin
	CF_expected[0] = 1'bX;
end 
// expected CT[ 3 ]
initial
begin
	CT_expected[3] = 1'bX;
end 
// expected CT[ 2 ]
initial
begin
	CT_expected[2] = 1'bX;
end 
// expected CT[ 1 ]
initial
begin
	CT_expected[1] = 1'bX;
end 
// expected CT[ 0 ]
initial
begin
	CT_expected[0] = 1'bX;
end 

// expected em
initial
begin
	em_expected = 1'bX;
end 

// expected fu
initial
begin
	fu_expected = 1'bX;
end 
// expected rd_data_fifo[ 12 ]
initial
begin
	rd_data_fifo_expected[12] = 1'b0;
end 
// expected rd_data_fifo[ 11 ]
initial
begin
	rd_data_fifo_expected[11] = 1'b0;
end 
// expected rd_data_fifo[ 10 ]
initial
begin
	rd_data_fifo_expected[10] = 1'b0;
end 
// expected rd_data_fifo[ 9 ]
initial
begin
	rd_data_fifo_expected[9] = 1'b0;
end 
// expected rd_data_fifo[ 8 ]
initial
begin
	rd_data_fifo_expected[8] = 1'b0;
end 
// expected rd_data_fifo[ 7 ]
initial
begin
	rd_data_fifo_expected[7] = 1'b0;
end 
// expected rd_data_fifo[ 6 ]
initial
begin
	rd_data_fifo_expected[6] = 1'b0;
end 
// expected rd_data_fifo[ 5 ]
initial
begin
	rd_data_fifo_expected[5] = 1'b0;
end 
// expected rd_data_fifo[ 4 ]
initial
begin
	rd_data_fifo_expected[4] = 1'b0;
end 
// expected rd_data_fifo[ 3 ]
initial
begin
	rd_data_fifo_expected[3] = 1'b0;
end 
// expected rd_data_fifo[ 2 ]
initial
begin
	rd_data_fifo_expected[2] = 1'b0;
end 
// expected rd_data_fifo[ 1 ]
initial
begin
	rd_data_fifo_expected[1] = 1'b0;
end 
// expected rd_data_fifo[ 0 ]
initial
begin
	rd_data_fifo_expected[0] = 1'b0;
end 

// expected ss
initial
begin
	ss_expected = 1'bX;
end 
// generate trigger
always @(CF_expected or CF or CT_expected or CT or em_expected or em or fu_expected or fu or rd_data_fifo_expected or rd_data_fifo or ss_expected or ss)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CF = %b | expected CT = %b | expected em = %b | expected fu = %b | expected rd_data_fifo = %b | expected ss = %b | ",CF_expected_prev,CT_expected_prev,em_expected_prev,fu_expected_prev,rd_data_fifo_expected_prev,ss_expected_prev);
	$display("| real CF = %b | real CT = %b | real em = %b | real fu = %b | real rd_data_fifo = %b | real ss = %b | ",CF_prev,CT_prev,em_prev,fu_prev,rd_data_fifo_prev,ss_prev);
`endif
	if (
		( CF_expected_prev[0] !== 1'bx ) && ( CF_prev[0] !== CF_expected_prev[0] )
		&& ((CF_expected_prev[0] !== last_CF_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CF[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CF_expected_prev);
		$display ("     Real value = %b", CF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CF_exp[0] = CF_expected_prev[0];
	end
	if (
		( CF_expected_prev[1] !== 1'bx ) && ( CF_prev[1] !== CF_expected_prev[1] )
		&& ((CF_expected_prev[1] !== last_CF_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CF[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CF_expected_prev);
		$display ("     Real value = %b", CF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CF_exp[1] = CF_expected_prev[1];
	end
	if (
		( CF_expected_prev[2] !== 1'bx ) && ( CF_prev[2] !== CF_expected_prev[2] )
		&& ((CF_expected_prev[2] !== last_CF_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CF[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CF_expected_prev);
		$display ("     Real value = %b", CF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CF_exp[2] = CF_expected_prev[2];
	end
	if (
		( CF_expected_prev[3] !== 1'bx ) && ( CF_prev[3] !== CF_expected_prev[3] )
		&& ((CF_expected_prev[3] !== last_CF_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CF[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CF_expected_prev);
		$display ("     Real value = %b", CF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CF_exp[3] = CF_expected_prev[3];
	end
	if (
		( CT_expected_prev[0] !== 1'bx ) && ( CT_prev[0] !== CT_expected_prev[0] )
		&& ((CT_expected_prev[0] !== last_CT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CT_expected_prev);
		$display ("     Real value = %b", CT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CT_exp[0] = CT_expected_prev[0];
	end
	if (
		( CT_expected_prev[1] !== 1'bx ) && ( CT_prev[1] !== CT_expected_prev[1] )
		&& ((CT_expected_prev[1] !== last_CT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CT_expected_prev);
		$display ("     Real value = %b", CT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CT_exp[1] = CT_expected_prev[1];
	end
	if (
		( CT_expected_prev[2] !== 1'bx ) && ( CT_prev[2] !== CT_expected_prev[2] )
		&& ((CT_expected_prev[2] !== last_CT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CT_expected_prev);
		$display ("     Real value = %b", CT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CT_exp[2] = CT_expected_prev[2];
	end
	if (
		( CT_expected_prev[3] !== 1'bx ) && ( CT_prev[3] !== CT_expected_prev[3] )
		&& ((CT_expected_prev[3] !== last_CT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CT_expected_prev);
		$display ("     Real value = %b", CT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CT_exp[3] = CT_expected_prev[3];
	end
	if (
		( em_expected_prev !== 1'bx ) && ( em_prev !== em_expected_prev )
		&& ((em_expected_prev !== last_em_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port em :: @time = %t",  $realtime);
		$display ("     Expected value = %b", em_expected_prev);
		$display ("     Real value = %b", em_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_em_exp = em_expected_prev;
	end
	if (
		( fu_expected_prev !== 1'bx ) && ( fu_prev !== fu_expected_prev )
		&& ((fu_expected_prev !== last_fu_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fu :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fu_expected_prev);
		$display ("     Real value = %b", fu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_fu_exp = fu_expected_prev;
	end
	if (
		( rd_data_fifo_expected_prev[0] !== 1'bx ) && ( rd_data_fifo_prev[0] !== rd_data_fifo_expected_prev[0] )
		&& ((rd_data_fifo_expected_prev[0] !== last_rd_data_fifo_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[0] = rd_data_fifo_expected_prev[0];
	end
	if (
		( rd_data_fifo_expected_prev[1] !== 1'bx ) && ( rd_data_fifo_prev[1] !== rd_data_fifo_expected_prev[1] )
		&& ((rd_data_fifo_expected_prev[1] !== last_rd_data_fifo_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[1] = rd_data_fifo_expected_prev[1];
	end
	if (
		( rd_data_fifo_expected_prev[2] !== 1'bx ) && ( rd_data_fifo_prev[2] !== rd_data_fifo_expected_prev[2] )
		&& ((rd_data_fifo_expected_prev[2] !== last_rd_data_fifo_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[2] = rd_data_fifo_expected_prev[2];
	end
	if (
		( rd_data_fifo_expected_prev[3] !== 1'bx ) && ( rd_data_fifo_prev[3] !== rd_data_fifo_expected_prev[3] )
		&& ((rd_data_fifo_expected_prev[3] !== last_rd_data_fifo_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[3] = rd_data_fifo_expected_prev[3];
	end
	if (
		( rd_data_fifo_expected_prev[4] !== 1'bx ) && ( rd_data_fifo_prev[4] !== rd_data_fifo_expected_prev[4] )
		&& ((rd_data_fifo_expected_prev[4] !== last_rd_data_fifo_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[4] = rd_data_fifo_expected_prev[4];
	end
	if (
		( rd_data_fifo_expected_prev[5] !== 1'bx ) && ( rd_data_fifo_prev[5] !== rd_data_fifo_expected_prev[5] )
		&& ((rd_data_fifo_expected_prev[5] !== last_rd_data_fifo_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[5] = rd_data_fifo_expected_prev[5];
	end
	if (
		( rd_data_fifo_expected_prev[6] !== 1'bx ) && ( rd_data_fifo_prev[6] !== rd_data_fifo_expected_prev[6] )
		&& ((rd_data_fifo_expected_prev[6] !== last_rd_data_fifo_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[6] = rd_data_fifo_expected_prev[6];
	end
	if (
		( rd_data_fifo_expected_prev[7] !== 1'bx ) && ( rd_data_fifo_prev[7] !== rd_data_fifo_expected_prev[7] )
		&& ((rd_data_fifo_expected_prev[7] !== last_rd_data_fifo_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[7] = rd_data_fifo_expected_prev[7];
	end
	if (
		( rd_data_fifo_expected_prev[8] !== 1'bx ) && ( rd_data_fifo_prev[8] !== rd_data_fifo_expected_prev[8] )
		&& ((rd_data_fifo_expected_prev[8] !== last_rd_data_fifo_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[8] = rd_data_fifo_expected_prev[8];
	end
	if (
		( rd_data_fifo_expected_prev[9] !== 1'bx ) && ( rd_data_fifo_prev[9] !== rd_data_fifo_expected_prev[9] )
		&& ((rd_data_fifo_expected_prev[9] !== last_rd_data_fifo_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[9] = rd_data_fifo_expected_prev[9];
	end
	if (
		( rd_data_fifo_expected_prev[10] !== 1'bx ) && ( rd_data_fifo_prev[10] !== rd_data_fifo_expected_prev[10] )
		&& ((rd_data_fifo_expected_prev[10] !== last_rd_data_fifo_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[10] = rd_data_fifo_expected_prev[10];
	end
	if (
		( rd_data_fifo_expected_prev[11] !== 1'bx ) && ( rd_data_fifo_prev[11] !== rd_data_fifo_expected_prev[11] )
		&& ((rd_data_fifo_expected_prev[11] !== last_rd_data_fifo_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[11] = rd_data_fifo_expected_prev[11];
	end
	if (
		( rd_data_fifo_expected_prev[12] !== 1'bx ) && ( rd_data_fifo_prev[12] !== rd_data_fifo_expected_prev[12] )
		&& ((rd_data_fifo_expected_prev[12] !== last_rd_data_fifo_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd_data_fifo[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd_data_fifo_expected_prev);
		$display ("     Real value = %b", rd_data_fifo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rd_data_fifo_exp[12] = rd_data_fifo_expected_prev[12];
	end
	if (
		( ss_expected_prev !== 1'bx ) && ( ss_prev !== ss_expected_prev )
		&& ((ss_expected_prev !== last_ss_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ss :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ss_expected_prev);
		$display ("     Real value = %b", ss_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ss_exp = ss_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module fifo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_fifo;
reg rd_fifo;
reg reset_fifo;
reg [12:0] wr_data_fifo;
reg wr_fifo;
// wires                                               
wire [3:0] CF;
wire [3:0] CT;
wire em;
wire fu;
wire [12:0] rd_data_fifo;
wire ss;

wire sampler;                             

// assign statements (if any)                          
fifo i1 (
// port map - connection between master ports and signals/registers   
	.CF(CF),
	.clk_fifo(clk_fifo),
	.CT(CT),
	.em(em),
	.fu(fu),
	.rd_data_fifo(rd_data_fifo),
	.rd_fifo(rd_fifo),
	.reset_fifo(reset_fifo),
	.ss(ss),
	.wr_data_fifo(wr_data_fifo),
	.wr_fifo(wr_fifo)
);

// clk_fifo
always
begin
	clk_fifo = 1'b0;
	clk_fifo = #2500 1'b1;
	#2500;
end 

// rd_fifo
initial
begin
	rd_fifo = 1'b0;
end 

// reset_fifo
initial
begin
	reset_fifo = 1'b1;
	reset_fifo = #10000 1'b0;
end 
// wr_data_fifo[ 12 ]
initial
begin
	wr_data_fifo[12] = 1'b0;
	wr_data_fifo[12] = #100000 1'b1;
	wr_data_fifo[12] = #10000 1'b0;
	wr_data_fifo[12] = #10000 1'b1;
	wr_data_fifo[12] = #10000 1'b0;
	wr_data_fifo[12] = #10000 1'b1;
	wr_data_fifo[12] = #10000 1'b0;
end 
// wr_data_fifo[ 11 ]
initial
begin
	wr_data_fifo[11] = 1'b0;
	wr_data_fifo[11] = #90000 1'b1;
	wr_data_fifo[11] = #10000 1'b0;
	wr_data_fifo[11] = #10000 1'b1;
	wr_data_fifo[11] = #40000 1'b0;
end 
// wr_data_fifo[ 10 ]
initial
begin
	wr_data_fifo[10] = 1'b0;
	wr_data_fifo[10] = #130000 1'b1;
	wr_data_fifo[10] = #20000 1'b0;
end 
// wr_data_fifo[ 9 ]
initial
begin
	wr_data_fifo[9] = 1'b0;
	wr_data_fifo[9] = #130000 1'b1;
	wr_data_fifo[9] = #10000 1'b0;
end 
// wr_data_fifo[ 8 ]
initial
begin
	wr_data_fifo[8] = 1'b0;
	wr_data_fifo[8] = #110000 1'b1;
	wr_data_fifo[8] = #50000 1'b0;
end 
// wr_data_fifo[ 7 ]
initial
begin
	wr_data_fifo[7] = 1'b0;
	wr_data_fifo[7] = #110000 1'b1;
	wr_data_fifo[7] = #20000 1'b0;
	wr_data_fifo[7] = #10000 1'b1;
	wr_data_fifo[7] = #10000 1'b0;
end 
// wr_data_fifo[ 6 ]
initial
begin
	wr_data_fifo[6] = 1'b0;
	wr_data_fifo[6] = #90000 1'b1;
	wr_data_fifo[6] = #10000 1'b0;
	wr_data_fifo[6] = #50000 1'b1;
	wr_data_fifo[6] = #10000 1'b0;
end 
// wr_data_fifo[ 5 ]
initial
begin
	wr_data_fifo[5] = 1'b0;
	wr_data_fifo[5] = #90000 1'b1;
	wr_data_fifo[5] = #30000 1'b0;
	wr_data_fifo[5] = #20000 1'b1;
	wr_data_fifo[5] = #10000 1'b0;
end 
// wr_data_fifo[ 4 ]
initial
begin
	wr_data_fifo[4] = 1'b0;
	wr_data_fifo[4] = #100000 1'b1;
	wr_data_fifo[4] = #10000 1'b0;
	wr_data_fifo[4] = #10000 1'b1;
	wr_data_fifo[4] = #10000 1'b0;
	wr_data_fifo[4] = #20000 1'b1;
	wr_data_fifo[4] = #10000 1'b0;
end 
// wr_data_fifo[ 3 ]
initial
begin
	wr_data_fifo[3] = 1'b0;
	wr_data_fifo[3] = #90000 1'b1;
	wr_data_fifo[3] = #70000 1'b0;
end 
// wr_data_fifo[ 2 ]
initial
begin
	wr_data_fifo[2] = 1'b0;
	wr_data_fifo[2] = #150000 1'b1;
	wr_data_fifo[2] = #10000 1'b0;
end 
// wr_data_fifo[ 1 ]
initial
begin
	wr_data_fifo[1] = 1'b0;
	wr_data_fifo[1] = #90000 1'b1;
	wr_data_fifo[1] = #30000 1'b0;
	wr_data_fifo[1] = #30000 1'b1;
	wr_data_fifo[1] = #10000 1'b0;
end 
// wr_data_fifo[ 0 ]
initial
begin
	wr_data_fifo[0] = 1'b0;
	wr_data_fifo[0] = #90000 1'b1;
	wr_data_fifo[0] = #40000 1'b0;
	wr_data_fifo[0] = #10000 1'b1;
	wr_data_fifo[0] = #20000 1'b0;
end 

// wr_fifo
initial
begin
	wr_fifo = 1'b0;
	wr_fifo = #90000 1'b1;
	wr_fifo = #10000 1'b0;
	wr_fifo = #10000 1'b1;
	wr_fifo = #10000 1'b0;
	wr_fifo = #10000 1'b1;
	wr_fifo = #10000 1'b0;
	wr_fifo = #10000 1'b1;
	wr_fifo = #10000 1'b0;
end 

fifo_vlg_sample_tst tb_sample (
	.clk_fifo(clk_fifo),
	.rd_fifo(rd_fifo),
	.reset_fifo(reset_fifo),
	.wr_data_fifo(wr_data_fifo),
	.wr_fifo(wr_fifo),
	.sampler_tx(sampler)
);

fifo_vlg_check_tst tb_out(
	.CF(CF),
	.CT(CT),
	.em(em),
	.fu(fu),
	.rd_data_fifo(rd_data_fifo),
	.ss(ss),
	.sampler_rx(sampler)
);
endmodule

